  /*****************find mid**************************/
   // find midpoint in the vector 
     vector<string>::iterator mid = svec.begin() + svec.size()/2; 
   // initialize front with first half of svec: The elements up to but not including *mid 
     deque<string> front(svec.begin(), mid); 
   // initialize back with second half of svec: The elements *mid through end of svec 
     deque<string> back(mid, svec.end()); 

  /*****************copy  array*************************/
      char *words[] = {"stately", "plump", "buck", "mulligan"}; 
     // calculate how many elements in words 
     size_t words_size = sizeof(words)/sizeof(char *); 
     // use entire array to initialize words2 
     list<string> words2(words, words + words_size); 

  /*****************if  the iterater is legal*************************/
bool  findTheInt( iter first, iter last, int x ) 
{ 
  assert( first <= last ); ------------
} 

  /*****************use  the type refrence *************************/
      list<int>::reference val = *ilist.begin(); 
      list<int>::reference val2 = ilist.front(); 


  /*****************check end before erase *************************/
  if (iter != slist.end())  slist.erase(iter); 


  /*****************erase in  for *************************/
	for ( vector< int>::iterator iter = iVec.begin(); iter != iVec.end(); ++iter ) 
	{ 
		if  ( *iter % 2 == 0 ) 
		{ 
			iter = iVec.erase( iter ); 
			if (iter!=iVec.begin ())
			{
				iter--;
			}
		} 
	} 
	for ( list< int>::iterator Lit = iLst.begin(); Lit != iLst.end();) 
	{ 
		if  ( *Lit % 2 == 1 ) 
		{ 
			Lit = iLst.erase( Lit );  
		} 
		else
		{
                                                Lit++;	
		}
	} 

  /*****************improve  performance *************************/
假设希望一次读取一个字符并写入 string 对象，而且已知需要读入至少 100 个字符， 考虑应该如何提高程序的性能？
首先reserve（100）

