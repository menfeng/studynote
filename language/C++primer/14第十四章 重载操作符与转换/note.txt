Chapter 14. Overloaded Operations and Conversions 
14.1. Defining an Overloaded Operator
1*除了函数调用操作符之外，重载操作符的形参数目（包括成员函数的隐式 this 指针）与操作符的操作数数目相同。函数调用操作符可以接受任意数   目的操作数。
2*不能重载的操作符
::    .*      .      ?:
3*通过连接其他合法符号可以创建新的操作符
4*Overloaded Operators Must Have an Operand of Class Type
用于内置类型的操作符，其含义不能改变,int operator+(int, int);
重载操作符必须具有至少一个类类型或枚举类型的操作数。这条规则强制重载操作符不能重新定义用于内置类型对象的操作符的含义。
5*Precedence and Associativity Are Fixed
有四个符号（+, -, * 和 &）既可作一元操作符又可作二元操作符，这些操作符有的在其中一种情况下可以重载，有的两种都可以，定义的是哪个操作符由操作数数目控制。除了函数调用操作符 operator() 之外，重载操作符时使用默认实参是非法的。
6*Short-Ciruit Evaluation Is Not Preserved
在 && 和 || 的重载版本中，两个操作数都要进行求值，而且对操作数的求值顺序不做规定。因此，重载 &&、|| 或逗号操作符不是一种好的做法。
7*Class Member versus Nonmember
&&&作为类成员的重载函数，其形参看起来比操作数数目少 1。作为成员函数的操作符有一个隐含的 this 形参，限定为第一个操作数。
&&&一般算术和关系操作符定义非成员函数，将赋值操作符定义为成员,通常加（非成员）返回一个右值，而复合赋值（成员）返回对左操作数的引用
8*Operator Overloading and Friendship
操作符定义为非成员函数时，通常必须将它们设置为所操作类的友元，一般不需要将加操作符设置为友元，它可以用 public 成员 operator+= 实现。
9*Using Overloaded Operators
非成员
item1 + item2 
operator+(item1, item2)
成员
item1 += item2;           
 item1.operator+=(item2);   
14.1.1. Overloaded Operator Design
经验原则：
（1）Don't Overload Operators with Built-in Meanings（内置含义）
         赋值操作符、取地址操作符和逗号操作符对类类型操作数有默认含义。如果没有特定重载版本，编译器就自己定义以下这些操作符。合成赋值操          作符进行逐个成员赋值 ,取地址操作符（&）和逗号操作符（,）在类类型对象上的执行，与在内置类型对象上的执行一样,重载逗号、取地址、逻       辑与、逻辑或等等操作符通常不是好做法
（2）Most Operators Have No Meaning for Class Objects
         除了（1）中提到的其余操作符没有意义，类设计时先设计公共接口，然后看哪些操作可以映射为操作符 
（3）Compound Assignment Operators
         如果一个类有算术操作符或位操作符，那么，提供相应的复合赋值操作符一般是个好的做法
（4）Equality and Relational Operators
         关联容器键类型的类应定义 < 操作符
         许多算法假定< 和 ==存在。例如 sort 算法使用 < 操作符，而 find 算法使用 == 操作符。
         定义==通常也定义！=，定义<通常也定义>    <=    >=
（5）Choosing Member or Nonmember Implementation
         是否作为类成员知道原则：
         a赋值（=）、下标（[]）、调用（()）和成员访问箭头（->）
         b像赋值一样，复合赋值操作符通常应定义为类的成员,但不强求
         c改变对象状态或与给定类型紧密联系的其他一些操作符，如自增、自减和解引用，通常就定义为类成员
         d对称的操作符，如算术操作符、相等操作符、关系操作符和位操作符，最好定义为普通非成员函数。（对称说明等价，就别限制左操作数了）


14.2. Input and Output Operators

14.2.1. Overloading the Output Operator <<
 ostream&   operator <<(ostream& os, const ClassType &object)
     {
         os << // ...
         return os;
     }
ostream& os, 引用因为不能复制，非const因为输出会改变流状态；返回的也是非const引用
1*Output Operators Usually Do Minimal Formatting
输出操作符应输出对象的内容，进行最小限度的格式化，它们不应该输出换行符
2*IO Operators Must Be Nonmember Functions
保证左操作数为iostream，（经试验，可以在类中定义一个输出操作符成员，并可已成功使用，只是用起来很别扭）
14.2.2. Overloading the Input Operator >>
 istream&   operator>>(istream& in, Sales_item& s)
     {
         double price;
         in >> s.isbn >> s.units_sold >> price;
         // check that the inputs succeeded
         if (in)
            s.revenue = s.units_sold * price;
         else
            s = Sales_item(); // input failed: reset object to default state
         return in;
     }
//注意和输出不同的地方：第二个参数不能为const，必须考虑到输入错误的处理，我们无需检查每次读入，只在使用读入数据之前检查一次即可：
1*Handling Input Errors
如果输入操作符检测到输入失败了，则确保对象处于可用和一致的状态是个好做法
2*Indicating Errors
也许我们已成功读取了数据，但这些数据不能恰当解释为 ISBN，那么没出错前的输入成功，之后的数据保持不变，由此导致数据错位
通常输入操作符仅需设置 failbit。设置 eofbit 意思是文件耗尽，设置 badbit 可以指出流被破坏，这些错误最好留给 IO 标准库自己来指出。
注意：在定义输入输出符时，有些成员我们可直接利用其本身带有的输入输出符。
          有些成员在输入前，要先释放，再创建，如有个保存指针的vector


14.3. Arithmetic and Relational Operators
一般而言，将算术和关系操作符定义为非成员函数
 Sales_item    operator+(const Sales_item& lhs, const Sales_item& rhs)
     {
         Sales_item ret(lhs);  // copy lhs into a local object that we'll return
         ret += rhs;           // add in the contents of rhs
         return ret; // return ret by value
     }注意其中的注释
设计原则：我们创建了个临时对象，返回的也是这个临时对象
                一般用复合赋值操作符定义算数操作符（如果相反，在复合赋值中会增加一个临时对象，另还需设置算数操作为友元）
14.3.1. Equality Operators
通常比较每个数据成员，如果所有对应成员都相同，则认为两个对象相等

 inline bool  operator==(const Sales_item &lhs, const Sales_item &rhs)
     {
         // must be made a friend of Sales_item
         return lhs.units_sold == rhs.units_sold && lhs.revenue == rhs.revenue &&lhs.same_isbn(rhs);
     }
     inline bool  operator!=(const Sales_item &lhs, const Sales_item &rhs)
     {
         return !(lhs == rhs); // != defined in terms of operator==
     }
设计原则：
如果类定义了 operator==，它也应该定义 operator!=。相等和不操作符一般应该相互联系起来定义，让一个操作符完成比较对象的实际工作
14.3.2. Relational Operators

14.4. Assignment Operators 
类赋值操作符接受类类型形参，通常，该形参是对类类型的 const 引用，但也可以是类类型或对类类型的非 const 引用，这个没定义会合成
注意：赋值操作符可以重载。无论形参为何种类型，赋值操作符必须定义为成员函数
Assignment Should Return a Reference to *this
一般而言，赋值操作符与复合赋值操作符应返回左操作符的引用（当然在语法上来说这不是必须的）

14.5. Subscript Operator 
Providing Read and Write Access
一般需要定义两个版本：一个为非 const 成员并返回引用（可作为左右操作数），另一个为 const 成员并返回 const 引用。
 class Foo {
     public:
         int &operator[] (const size_t);
         const int &operator[] (const size_t) const;
     private:
         vector<int> data;
      };
            int& Foo::operator[] (const size_t index)          {return data[index];  // no range checking on index}//可使用at实现，检查是否越界
  const int& Foo::operator[] (const size_t index) const{ return data[index];  // no range checking on index}

14.6. Member Access Operators
允许（*）和（->）箭头操作符必须定义为类成员函数。解引用操作不要求定义为成员，但将它作为成员一般也是正确的。（.）是不允许重载的
1*Building a Safer Pointer
解引用操作符和箭头操作符常用在实现智能指针的类中
2*Overloading the Dereference Operator
像下标操作符一样，我们需要解引用操作符的 const 和非 const 版本。它们的区别在于返回类型：const 成员返回 const 引用以防止用户改变基础对象
3*Overloading the Arrow Operator
箭头操作符不接受显式形参，工作原理：
point->action();按照优先级等价于 (point->action)();
（1）如果 point 是一个指针，指向具有名为 action 的成员的类对象，则编译器将代码编译为调用该对象的 action 成员。
（2）否则，如果 action 是定义了 operator-> 操作符的类的一个对象，则 point->action 与 point.operator->()->action 相同。即，执行 point 的           operator->()，然后使用该结果重复这三步。
（3）否则，代码出错。
4*Using Overloaded Arrow
ScreenPtr p(&myScreen);    p->display(cout);        
那么p没有display成员，于是运行操作符，p.operator->() 它返回指向 Screen 对象的指针，再继续，就可直接调用screen的成员display了
4*Constraints （约束）on the Return from Overloaded Arrow
（1）如果返回类型是指针，则内置箭头操作符可用于该指针，编译器对该指针解引用并从结果对象获取指定成员。如果被指向的类型没有定义那个成        员，则编译器产生一个错误。
（2）如果返回类型是类类型的其他对象（或是这种对象的引用），则将递归应用该操作符。编译器检查返回对象所属类型是否具有成员箭头，如果有        ，就应用那个操作符；否则，编译器产生一个错误。
总结：定义类A的智能指针：先定义USE类包含A*和use成员，再定义APtr包含USE类，包含USE*，对APtr进行复制控制，定义（*）和（->）
          和13章中的智能指针原理相同，只不过13章中没有APtr，直接在USE中进行了复制控制；
14.7. Increment and Decrement Operators 
自增（++）和自减（--）操作符经常由诸如迭代器这样的类实现
Defining the Increment/Decrement Operators
Defining Prefix Increment/Decrement Operators
 class CheckedPtr {
     public:
         CheckedPtr& operator++();        // prefix operators
         CheckedPtr& operator--();
         // other members as before
      };
  CheckedPtr& CheckedPtr::operator++()
     {
         if (curr == end)
             throw out_of_range
                   ("increment past the end of CheckedPtr");
         ++curr;                // advance current state
         return *this;
     }

Differentiating Prefix and Postfix Operators
后缀式操作符函数接受一个额外的（即，无用的）int 型形参。编译器提供 0 作为这个形参的实参，虽然我们可以使用此额外参数，但是最好别用。
 class CheckedPtr {
     public:
         // increment and decrement
         CheckedPtr operator++(int);       // postfix operators
         CheckedPtr operator--(int);
         // other members as before
     };
 // postfix: increment/decrement object but return unchanged value
     CheckedPtr CheckedPtr::operator++(int)
     {

         // no check needed here, the call to prefix increment will do the check
         CheckedPtr ret(*this);        // save current value
         ++*this;                      // advance one element, checking the increment
         return ret;                   // return saved state
     }//定义后缀时，先保存副本，再使用前缀操作符
Calling the Postfix Operators Explicitly
建议：一般而言，最好前缀式和后缀式都定义。只定义前缀式或只定义后缀式的类

14.8. Call Operator and Function Objects
定义了调用操作符的类，其对象常称为函数对象
14.8.1. Using Function Objects with Library Algorithms
函数对象可以比函数更灵活
// determine whether a length of a given word is longer than a stored bound
     class GT_cls {
     public:
         GT_cls(size_t val = 0): bound(val) { }
         bool operator()(const string &s)
                            { return s.size() >= bound; }
     private:
         std::string::size_type bound;
};
14.8.2. Library-Defined Function Objects
标准库定义了一组算术、关系与逻辑函数对象类
plus<Type>
minus<Type>
multiplies<Type>
divides<Type>
modulus<Type>
negate<Type>

equal_to<Type>
not_equal_to<Type>
greater<Type>
greater_equal<Type>
less<Type>
less_equal<Type>

logical_and<Type>
logical_or<Type>
logical_not<Type>
以上均是定义了函数操作符（）的类模板（可以这样使用 <plus<int>()(3,4)）
有两个一元函数对象类：一元减（negate<Type>)）和逻辑非（logical_not<Type>)），其余均是一元
Using a Library Function Object with the Algorithms
eg： sort(svec.begin(), svec.end(), greater<string>())将会以降序排序;
14.8.3. Function Adaptors for Function Objects
标准库提供了一组函数适配器，用于特化和扩展一元和二元函数对象
(1)绑定器，是一种函数适配器，它通过将一个操作数绑定到给定值而将二元函数对象转换为一元函数对象
    标准库定义了两个绑定器适配器：bind1st 和 bind2nd,分别绑定第一个参数和第二个参数
    eg：count_if(vec.begin(), vec.end(),bind2nd(less_equal<int>(), 10));统计小于等于10的个数
(2)求反器，是一种函数适配器，它将谓词函数对象的真值求反
     标准库还定义了两个求反器：not1 和 not2分别对一元函数对象和二元函数对象求反
     eg: count_if(vec.begin(), vec.end(),not1(bind2nd(less_equal<int>(), 10)));统计大于10的个数

14.9. Conversions and Class Types
除了定义到类类型的转换之外，我们还可以定义从类类型的转换
14.9.1. Why Conversions Are Useful
Conversions Reduce the Number of Needed Operators

14.9.2. Conversion Operators
转换操作符在类定义体内声明，在保留字 operator 之后跟着转换的目标类型：
operator type();type 表示内置类型名、类类型名或由类型别名定义的名字
对任何可作为函数返回类型的类型（除了 void 之外）都可以定义转换函数。一般而言，不允许转换为数组或函数类型，转换为指针类型（数据和函数指针）以及引用类型是可以的。
定义规则 ：  转换函数必须是成员函数，无参无返回，转换函数一般不应该改变被转换的对象。因此，转换操作符通常应定义为 const 成员
1*Using a Class-Type Conversion
只要存在转换，编译器将在可以使用内置转换的地方自动调用它
eg：cout << si << endl;（si 定义了到int的转换）
      static_cast<int>(si)
2*Class-Type Conversions and Standard Conversions
被转换的类型不必与所需要的类型完全匹配double dval;   si >= dval   si->int->double
3*Only One Class-Type Conversion May Be Applied
即不能传递转换，如A可以转到B   B可以转到C  那么我们不能在需要C的地方传递类型A
4*Standard Conversions Can Precede a Class-Type Conversion
使用构造函数执行隐式转换的时候，构造函数的形参类型不必与所提供的类型完全匹配


14.9.3. Argument Matching and Conversions
类类型转换也可能是编译时错误的一大来源
1*Argument Matching and Multiple Conversion Operators
一般而言，给出一个类与两个内置类型之间的转换是不好的做法
eg:A->int  A->double   f(long double)  则f接受A类型的形参时导致二义性
如果两个转换操作符都可用在一个调用中，而且在转换函数之后存在标准转换（第 7.8.4 节），则根据该标准转换的类别选择最佳匹配

2*Argument Matching and Conversions by Constructors
一般而言，不要搞两个接受内置类型的形参的构造函数
eg：A（int）A（double）那么用long进行构造时就会二义性  
当两个构造函数定义的转换都可以使用时，如果存在构造函数实参所需的标准转换，就用该标准转换的类型选择最佳匹配
3*Ambiguities When Two Classes Define Conversions
两个类不要定义相互转换
eg：A（B）    B中operator A（）    F（A）对F传B类型时二义性
然而  A（const B&）     B中operator A（）    F（A）对F传B类型时无二义性，使用第二个函数（但在vs2005中任然报错）
总结：避免二义性最好的方法是，保证最多只有一种途径将一个类型转换为另一类型，尤其是，到一种内置类型应该只有一个转换

14.9.4. Overload Resolution and Class Arguments
1*Standard Conversions Following Conversion Operator
只有两个转换序列使用同一Conversion Operator时，才用类类型转换之后的标准转换序列作为选择标准。
2*Multiple Conversions and Overload Resolution
eg：A中   operater B()  operater C()  
       F函数             F(B)              F(C)那么A类型传给F二义性，因为有两个Conversion Operator可用，直接报错，不会再进行后续转换的比较
可以使用显式的强制转换消除二义性
4*Standard Conversions and Constructors
A中 A（int）
B中B （int）
F（A） F（B） F（10）二义性    即使A（short）任然改变不了实质会二义性，编译器不会更喜欢直接构造函数
可以通过强制转换消除二义性，但这是设计拙劣的表现

14.9.5. Overloading, Conversions, and Operators
A+3    根据是否定义了转换，和是否重载了加法有四种可能
1*Overload Resolution and Operators
操作符的重载确定遵循常见的三步过程
candidate functions-》viable functions -》best match function
2*Candidate Functions for Operators
操作符的candidate   functions 包括内置的，非成员的，成员的
&&&一般函数调用的候选集只包括成员函数或非成员函数，不会两者都包括（如通过类调用时，一般就考虑类中的成员，否则不会去考虑类成员）。
&&&而确定操作符的使用时，操作符的非成员和成员版本可能都是候选者（使用重载操作符是时，调用本身不会告诉我们与使用的操作符函数作用域相关的任何事情）。

Caution: Conversions and Operators
（1）不要定义相互转换的类
（2）避免到内置算术类型的转换，如果定义了转换，不要定义接受算术类型的操作符的重载版本
（3）不要定义转换到一个以上算术类型的转换
4*Conversions Can Cause Ambiguity with Built-In Operators
A+3当A可转为int，int可转换i为A并定义了两个A的加法时    就出现了二义性







