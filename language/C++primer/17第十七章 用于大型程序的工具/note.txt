Chapter 17. Tools for Large Programs 

17.1. Exception Handling

通过异常我们能够将问题的检测和问题的解决分离，需要由问题检测部分抛出一个对象给处理代码
17.1.1. Throwing an Exception of Class Type
异常可以是可传给非引用形参的任意类型的对象，这意味着必须能够复制该类型的对象。并且抛出的数组或函数会自动转换为指针
Exception Objects and Inheritance
当抛出一个表达式的时候，被抛出对象的静态编译时类型将决定异常对象的类型。
Exceptions and Pointers
（1）抛出静态类型时，比较麻烦的一种情况是，在抛出中对指针解引用，结果是一个对象，无论对象的实际类型是什么，异常对象的类型都与指针的静态类型相匹配，所以可能发生分割
（2）如果抛出指针本身，抛出指向局部对象的指针总是错误的，抛出指针通常是个坏主意：抛出指针要求在对应处理代码存在的任意地方存在指针所指向的对象

17.1.2. Stack Unwinding
抛出异常的时候，将暂停当前函数的执行，开始查找匹配的 catch 子句。
（1）首先检查 throw 本身是否在 try 块内部，如果是，检查与该 catch 相关的 catch 子句，看是否其中之一与抛出对象相匹配。
（2）如果找到匹配的 catch，就处理异常；如果找不到，就退出当前函数（释放当前函数的内在并撤销局部对象），并且继续在调用函数中查找。
（3）当 catch 结束的时候，在紧接在与该 try 块相关的最后一个 catch 子句之后的点继续执行。
Destructors Are Called for Local Objects
栈展开期间，释放局部对象所用的内存并运行类类型局部对象的析构函数，如果一个块直接分配资源，而且在释放资源之前发生异常，则不会撤销已经分配的的资源
Destructors Should Never throw Exceptions
如果在栈展开期间运行析构函数中抛出异常，那么将会导致调用标准库 terminate 函数。一般而言，terminate 函数将调用 abort 函数，强制从整个程序非正常退出。在实践中，因为析构函数释放资源，所以它不太可能抛出异常。标准库类型都保证它们的析构函数不会引发异常。
Exceptions and Constructors
构造期间，抛出异常会适当撤销已经构造的元素
Uncaught Exceptions Terminate the Program
不会不处理异常，如果找不到匹配的 catch，程序就调用库函数 terminate。
17.1.3. Catching an Exception
catch 子句中的异常说明符看起来像只包含一个形参的形参表，异常说明符是在其后跟一个（可选，只需要知道是什么类型时就可省略）形参名的类型名，类型必须是完全类型，必须是内置的，或已定义的错误类型，类型的前向声明不行。
Finding a Matching Handler
最特殊的catch应当最先出现
catch期间的类型转换：从非const到const
                                    从派生类到基类的转换
                                   从数组函数到适当的指针
Exception Specifiers
像函数形参一样，异常说明符类型可以是引用。然而要明确异常对象本身是被抛出对象的副本
Exception Specifiers and Inheritance
基类的异常说明符可以用于捕获派生类型的异常对象，而且，异常说明符的静态类型决定 catch 子句可以执行的动作通常，如果 catch 子句处理因继承而相关的类型的异常，它就应该将自己的形参定义为引用。否则会造成分割
Ordering of Catch Clauses Must Reflect Type Hierarchy
带有因继承而相关的类型的多个 catch 子句，必须从最低派生类类到最高派生类型排序
17.1.4. Rethrow
catch 可以通过重新抛出将异常传递函数调用链中更上层的函数   throw;  throw后不用跟任何类型，他它只能出现在 catch 或者从 catch 调用的函数中。如果在处理代码不活动时碰到空 throw，就调用 terminate 函数。
被抛出的异常是原来的异常对象，而不是 catch 形参来自带基类类型形参 catch 的重新抛出，可能实际抛出一个派生类型的对象。如果形参为引用，那么可能抛出改变后的对象
17.1.5. The Catch-All Handler
即使函数不能处理被抛出的异常，它也可能想要在随抛出异常退出之前执行一些动作，使用捕获所有异常的语句 catch(...)，如果与其他catch一起使用应当放在最后
17.1.6. Function Try Blocks and Constructors
为了处理来自构造函数初始化式的异常，必须将构造函数编写为函数 try 块。
A（）try ：M(m){}
17.1.7. Exception Class Hierarchies
exception 类型所定义的唯一操作是一个名为 what 的虚成员,可以实现动态绑定
下面有bad_cast     bad_alloc   以及runtime_error   logic_error
Using Programmer-Defined Exception Types
这与使用标准的异常类是一样的
17.1.8. Automatic Resource Deallocation
在 new 之后但在 delete 之前发生的异常使得资源没有被撤销
Using Classes to Manage Resource Allocation
对析构函数的运行导致一个重要的编程技术的出现，它使程序更为 异常安全的 
异常安全的意味着，即使发生异常，程序也能正确操作。在这种情况下，“安全”来自于保证“如果发生异常，被分配的任何资源都适当地释放”。
通过定义一个类来封闭资源的分配和释放，可以保证正确释放资源。这一技术常称为“资源分配即初始化”，简称 RAII。
 class Resource {
    public:
        Resource(parms p): r(allocate(p)) { }
        ~Resource() { release(r); }
        // also need to define copy and assignment
    private:
        resource_type *r;           // resource managed by this type
        resource_type *allocate(parms p);     // allocate this resource
        void release(resource_type*);         // free this resource
    };
17.1.9. The auto_ptr Class
主要就是理解好下面这些接口就好了
auto_ptr 类在头文件 memory 中定义。
auto_ptr<T> ap;     创建名为 ap 的未绑定的 auto_ptr 对象
auto_ptr<T> ap(p);创建名为 ap 的 auto_ptr 对象，ap 拥有指针 p 指向的对象。该构造函数为 explicit 
                               所以必须使用初始化的直接形式来创建 auto_ptr 对象
auto_ptr<T> ap1(ap2);创建名为 ap1 的 auto_ptr 对象，ap1 保存原来存储在 ap2 中的指针。将所有权转给 ap1，ap2 成为未绑定的 auto_ptr 对象
ap1 = ap2     将所有权 ap2 转给 ap1。删除 ap1 指向的对象并且使 ap1 指向 ap2 指向的对象，使 ap2 成为未绑定的
~ap              析构函数。删除 ap 指向的对象
*ap              返回对 ap 所绑定的对象的引用
ap->            返回 ap 保存的指针
ap.reset(p)   如果 p 与 ap 的值不同，则删除 ap 指向的对象并且将 ap 绑定到 p    要复位 auto_ptr 对象，可以将 0 传给 reset 函数。
                    将自己指向的p再次传给reset不会有 效果，不会删除基础对象的
ap.release()  返回 ap 所保存的指针并且使 ap 成为未绑定的
ap.get()       返回 ap 保存的指针 可以将 get 的返回值与 0 比较 if (p_auto.get()              if (p_auto)错误，没有到可作条件的类型的转换     
使用注意事项
（1）auto_ptr 只能用于管理从 new 返回的一个对象，它不能管理动态分配的数组。auto_ptr 对象指向动态分配的数组会导致未定义的运行时行为
        不要使用get的返回给另一个赋值，因为一个auto_ptr 只对应一个对象        delete 操作符，而不用数组的 delete [] 操作符
（2）auto_ptr 被复制或赋值的时候，有不寻常的行为，因此，不能将 auto_ptrs 存储在标准库容器类型中。
（3）auto_ptr 对象超出作用域或者另外撤销的时候，就自动回收 auto_ptr 所指向的动态分配对象
 Using auto_ptr for Exception-Safe Memory Allocation
auto_ptr<int> ap(new int(42)); 
Binding an auto_ptr to a Pointer
Using an auto_ptr
string *pstr_type = new string("Brontosaurus");
    if (pstr_type->empty())
17.1.10. Exception Specifications
Defining an Exception Specification
异常说明是函数接口的一部分，函数定义以及该函数的任意声明必须具有相同的异常说明
如果一个函数声明没有指定异常说明，则该函数可以抛出任意类型的异常。throw（）表明什么也不抛出
Violating the Exception Specification
如果函数抛出了没有在其异常说明中列出的异常，就调用标准库函数 unexpected。默认情况下，unexpected 函数调用 terminate 函数，terminate 函数一般会终止程序。在编译的时候，编译器不能也不会试图验证异常说明。
Specifying that the Function Does Not Throw
异常说明的应用通常是有限的，有用的一种重要情况是，如果函数可以保证不会抛出任何异常，会简化编写调用该函数的异常安全的代码的工作，编译器就可以执行被可能抛出异常的代码所抑制的优化。
Exception Specifications and Member Functions
eg：：：：：virtual const char* what() const throw();
Exception Specifications and Destructors
class isbn_mismatch: public std::logic_error {
     public:
         virtual ~isbn_mismatch() throw() { }
     };
标准异常的析构声明了throw，从他们即的的类也必须承诺不抛出任何异常
out_of_stock 类没有成员，所以它的合成析构函数不做任何可能抛出异常的事情，因此，编译器可以知道合成析构函数将遵守不抛出异常的承诺。
isbn_mismatch 类有两个 string 类成员的析构声明了throw（）但是编译器不知道，所以我们定义自己的析构函数来析构

Exception Specifications and Virtual Functions
派生类虚函数的异常说明必须与对应基类虚函数的异常说明同样严格，或者比后者更受限。这样编写代码时可以认为基类中的异常列表是虚函数的派生类版本可以抛出的异常列表的超集
17.1.11. Function Pointer Exception Specifications
void (*pf)(int) throw(runtime_error);    在对其进行赋值时，源参数的限制应该更强


17.2. Namespaces
名字冲突问题称为     命名空间污染   问题 ，传统上，程序员通过将全局实体的名字设得很长来避免命名空间污染
17.2.1. Namespace Definitions
 namespace cplusplus_primer{。。。。。。。。。。。。}
命名空间可以在全局作用域或其他作用域内部定义，但不能在函数或类内部定义。命名空间作用域不能以分号结束
Each Namespace Is a Scope
Using Namespace Members from Outside the Namespace
当然，总是使用限定名，，可以编写 using 声明来获得对我们知道将经常使用的名字的直接访问：using cplusplus_primer::Query;
Namespaces Can Be Discontiguous 不连续的
命名空间可以定义在不同的部分，甚至不同的文件中  ，既可以定义新的命名空间，也可以添加到现在命名空间中
Separation of Interface and Implementation
按这种方式组织命名空间，也满足了不同实体（非内联函数、静态数据成员、变量等）只能在一个程序中定义一次的要求，
定义多个不相关类型的命名空间应该使用分离的文件，表示该命名空间定义的每个类型。一个类的用户不必编译与其他类相关的名字
Defining the Primer Namespace
Defining Namespace Members
可以在命名空间内部或外部定义，跟定义类成员是一样的
Members May Not Be Defined in Unrelated Namespaces
The Global Namespace
全局命名空间是隐式声明的，存在于每个程序中     ::member_name
17.2.2. Nested Namespaces
当库提供者需要防止库中每个部分的名字与库中其他部分的名字冲突的时候，嵌套命名空间是很有用的。

17.2.3. Unnamed Namespaces
namespaces{}           
（1）未命名的命名空间可以在给定文件中不连续，但不跨越多个文本文件。
（2）未命名的命名空间用于声明局部于文件的实体。在未命名的命名空间中定义的变量在程序开始时创建，在程序结束之前一直存在。
（3）未命名的命名空间中定义的名字可直接使用，不能使用作用域
（4）未命名空间中定义的名字可以在定义该命名空间所在的作用域中找到。如果在文件的最外层作用域中定义未命名的命名空间，那么，未命名的空        间中的名字必须与全局作用域中定义的名字不同
（5）像任意其他命名空间一样，未命名的命名空间也可以嵌套在另一命名空间内部。其中的名字使用外围命名空间名字访问
（6）如果头文件定义了未命名的命名空间，那么，在每个包含该头文件的文件中，该命名空间中的名字将定义不同的局部实体。
Unnamed Namespaces Replace File Statics
在标准 C++ 中引入命名空间之前，程序必须将名字声明为 static，使它们局部于一个文件。C++ 不赞成文件静态声明。不赞成的特征是在未来版本中可能不支持的特征。应该避免文件静态而使用未命名空间代替。
17.2.4. Using Namespace Members
除了在函数或其他作用域内部，头文件不应该包含 using 指示或 using 声明，头文件应该只定义作为其接口的一部分的名字，不要定义在其实现中使用的名字
using Declarations, a Recap
eg： using std::map;
Scope of a using Declaration
自声明起。到作用域的结束，名字都是可见的。外部作用域中定义的同名实体被屏蔽。
类作用域中的 using 声明局限于被定义类的基类中定义的名字？？？

Namespace Aliases（别名）
namespace primer = cplusplus_primer;
using Directives（指标）
与 using 声明不同，using 指示无法控制使得哪些名字可见――它们都是可见的。但在使用多个库的时候，这样做会重新引入名字冲突的所有问题
using Directives and Scope
using 指示不声明命名空间成员名字的别名，相反，它具有将命名空间成员提升到包含命名空间本身和 using 指示的最近作用域的效果eg：：
namespace A { int i, j; }
void f(){using namespace A;}像 A 中的名字出现在全局作用域中 f 的定义之前一样：using 指示有用的一种情况是，用在命名空间本身的实现文件中
Caution: Avoid Using Directives
使用using指示的坏处：
（1）此刻没错当库版本更新后可能就会出错
（2）错误检查发生的使用处而不是声明（using声明，就是在声明处检查）。此刻没错，但是当使用库的新的部分时可能就会发生错误
17.2.5. Classes, Namespaces, and Scope
（1）对命名空间内部使用的名字的查找遵循常规 C++ 查找：通过外围作用域向外查找，以全局结束，并只考虑在使用点之前的名字和仍开放的块
（2）对于类，先遵循类中的查找规则，再到外围中进行查找，外围可以有多个命名空间
Argument-Dependent Lookup and Class Type Parameters
接受类类型形参（或类类型指针及引用形参）的函数（包括重载操作符），以及与类本身定义在同一命名空间中的函数（包括重载操作符），在用类类型对象（或类类型的引用及指针）作为实参的时候是可见的。这个例外主要是为类操作符服务
Implicit Friend Declarations and Namespaces
如果类在命名空间内部定义，则没有另外声明的友元函数在同一命名空间中声明。
17.2.6. Overloading and Namespaces
Candidate Functions and Namespaces
命名空间对函数匹配有两个影响。一个影响是明显的：using 声明或 using 指示可以将函数加到候选集合。另一个影响则微妙得多
有一个或多个类类型形参的函数的名字查找包括定义每个形参类型的命名空间。将那些命名空间中带有匹配名字的函数加入候选集合：
Overloading and using Declarations
using 声明声明一个名字。没有办法编写 using 声明来引用特定函数声明：
Overloading and using Directives
Overloading across Multiple using Directives 如果存在许多 using 指示，则来自每个命名空间的名字成为候选集合的组成部分
17.2.7. Namespaces and Templates
在命名空间内部声明模板影响着怎样声明模板特化：模板的显式特化必须在定义通用模板的命名空间中声明，否则，该特化将与它所特化的模板不同名
（1）一种是重新打开命名空间并加入特化的定义
（2）可以用与在命名空间定义外部  定义命名空间成员   相同的方式来定义特化


17.3. Multiple and Virtual Inheritance
17.3.1. Multiple Inheritance
class Bear : public ZooAnimal {};
class Panda : public Bear, public Endangered {};
只有在定义之后，类才可以用作多重继承的基类，在一个给定的派生列表中一个基类只能出现一次
Multiply Derived Classes Inherit State from Each Base Class
Derived Constructors Initialize All Base Classes
基类构造函数按照基类构造函数在类派生列表中的出现次序调用
Order of Destruction
总是按构造函数运行的逆序调用析构函数
17.3.2. Conversions and Multiple Base Classes
派生类的指针或引用可以转换为其任意其类的指针或引用，遇到二义性转换的可能性更大。编译器认为转换到每个基类都一样好
Virtual Functions under Multiple Inheritance
Lookup Based on Type of Pointer or Reference
Determining Which Virtual Destructor to Use
17.3.3. Copy Control for Multiply Derived Classes
使用基类自己的复制构造函数、赋值操作符或析构函数隐式构造、赋值或撤销每个基类。
如果具有多个基类的类定义了自己的析构函数，该析构函数只负责清除派生类。
如果派生类定义了自己的复制构造函数或赋值操作符，则类负责复制（赋值）所有的基类子部分。
17.3.4. Class Scope under Multiple Inheritance
当一个类有多个基类的时候，通过所有直接基类同时进行名字查找。多重继承的派生类有可能从两个或多个基类继承同名成员，对该成员不加限定的使用是二义性的。
Multiple Base Classes Can Lead to Ambiguities
Name Lookup Happens First
首先编译器找到一个匹配的声明（或者，在这个例子中，找到两个匹配的声明，即使参数不同，即使不在同一个继承层次，即使其中一个还是私有的，这导致二义性，），
然后，编译器才确定所找到的声明是否合法。
Avoiding User-Level Ambiguities
（1）可以通过指定使用哪个类解决二义性：
（2）避免潜在二义性最好的方法是，在解决二义性的派生类中定义函数的一个版本
17.3.5. Virtual Inheritance
共享的基类子对象称为虚基类。
class istream : public virtual ios { ... };
class ostream : virtual public ios { ... };
// iostream inherits only one copy of its ios base class
 class iostream: public istream, public ostream { ... };
A Different Panda Class
一个不直观的特征：必须在提出虚派生的任意实际需要之前进行虚派生
通常，使用虚继承的类层次是一次性由一个人或一个项目设计组设计的，独立开发的类很少需要其基类中的一个是虚基类，而且新基类的开发者不能改变已经存在的层次。
17.3.6. Virtual Base Class Declaration
the order of the keywords public and virtual is not significant
Normal Conversions to Base Are Supported
即使基类是虚基类，也照常可以通过基类类型的指针或引用操纵派生类的对象
Visibility of Virtual Base-Class Members
假定通过多个派生路径继承名为 X 的成员的前提下：
（1）如果在每个路径中 X 表示同一虚基类成员，则没有二义性，因为共享该成员的单个实例
（2）如果在某个路径中 X 是虚基类的成员，而在另一路径中 X 是后代派生类的成员，也没有二义性――特定派生类实例的优先级高于共享虚基类实例。
（3）如果沿每个继承路径 X 表示后代派生类的不同成员，则该成员的直接访问是二义性的。
17.3.7. Special Initialization Semantics
在虚派生中，由最低层派生类的构造函数初始化虚基类，如果最底层不显示初始化，则会调用虚基类的默认构造函数，如果没有默认构造函数，则会出错
Constructor and Destructor Order
无论虚基类出现在继承层次中任何地方，总是在构造非虚基类之前构造虚基类
（1）按声明次序检查直接基类，确定是否存在虚基类，是就构造
（2）一旦构造了虚基类，就按声明次序调用非虚基类的构造函数




























