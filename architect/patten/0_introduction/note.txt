mvc:
	model/view/controller
	model-view		:observer
	view-view		:composite
	view-controller	:strategy

elements:
	1.pattern name
	2.problem
	3.solution
	4.consequences

dynamic binding
	The run-time association of a request to an object and one of its operations is known as dynamic binding.

polymorphism
	dynamic binding lets you substitute objects that have identical interfaces for each other at run-time. This substitutability is known as polymorphism.

difference between an object's class and its type
	An object's class defines how the object is implemented. The class defines the object's internal state and the implementation of its operations.
	An object's type only refers to its interfaceâ€”the set of requests to which it can respond. 
	An object can have many types, and objects of different classes can have the same type.

class inheritance and interface inheritance (or subtyping)
	Class inheritance defines an object's implementation in terms of another object's implementation. In short, it's a mechanism for code and representation sharing.
	Interface inheritance (or subtyping) describes when an object can be used in place of another.

programming to an Interface, not an Implementation

reuse mechanisms:
	1.inheritance(white-box reuse)
		advantages
			modify the implementation
		disadvantages
			a.can't change the implementations inherited from parent classes at run-time
			b.inheritance breaks encapsulation
				any change in the parent's implementation will force the subclass to change.
				Should any aspect of the inherited implementation not be appropriate for new problem domains, the parent class must be rewritten or replaced by something more appropriate
	2.composition(black-box reuse)
		advantages
			can be replaced at run-time
			don't break encapsulation
		disadvantages
			indirection
			less efficient
		delegation is an extreme example of object composition
	3.parameterized types
	 	templates
	*.favor object composition over class inheritance

aggregation and acquaintance
	Aggregation
		owns,responsible,having,being part of 
		an aggregate object and its owner have identical lifetimes.
	knows,association,using

causes of redesign
	Creating an object by specifying a class explicitly
		Abstract Factory , Factory Method , Prototype
	Dependence on specific operations
		Chain of Responsibility, Command
	Dependence on hardware and software platform
		Abstract Factory, Bridge
	Dependence on object representations or implementations
		Abstract Factory, Bridge, Memento, Proxy
	Algorithmic dependencies
		Builder, Iterator, Strategy, Template Method, Visitor.
	Tight coupling
		Abstract Factory, Bridge, Chain of Responsibility, Command, Facade, Mediator, Observer
	Extending functionality by subclassing
		Bridge , Chain of Responsibility , Composite , Decorator , Observer , Strategy
	Inability to alter classes conveniently
		Adapter , Decorator , Visitor 

priorities in application programs, toolkits, and frameworks  
	Application Programs
		internal reuse
		maintainability
		extension
	Toolkits
		code reuse
	Frameworks
		design and code reuse
How to Select a Design Pattern
	1. Consider how design patterns solve design problems. Section 1.6
	2. Scan Intent sections. Section 1.4 
	3. Study how patterns interrelate
	4. Study patterns of like purpose.o
	5. Examine a cause of redesign. Look at the causes of redesign
	6. Consider what should be variable in your design

