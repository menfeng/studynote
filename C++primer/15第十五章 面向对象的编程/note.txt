Chapter 15. Object-Oriented Programming（OOP）
面向对象编程基于三个基本概念：数据抽象、继承和动态绑定。在 C++ 中，用类进行数据抽象，用类派生从一个类继承另一个：派生类继承基类的成员。动态绑定使编译器能够在运行时决定是使用基类中定义的函数还是派生类中定义的函数。
15.1. OOP: An Overview
Inheritance
通过继承我们能够定义这样的类，它们对类型之间的关系建模，共享公共的东西，仅仅特化本质上不同的东西
Dynamic Binding
动态绑定我们能够编写程序使用继承层次中任意类型的对象，无须关心对象的具体类型。用这些类的程序无须区分函数是在基类还是在派生类中定义的

15.2. Defining Base and Derived Classes
15.2.1. Defining a Base Class
Base-Class Member Functions
除了构造函数之外，任意非 static 成员函数都可以是虚函数。保留字只在类内部的成员函数声明中出现，不能用在类定义体外部出现的函数定义上。
Access Control and Inheritance
15.2.2. protected Members
派生类只能通过派生类对象访问其基类的 protected 成员，派生类对其基类类型对象的 protected 成员没有特殊访问权限。

15.2.3. Derived Classes
1*Defining a Derived Class
2*Derived Classes and virtual Functions
派生类中虚函数的声明必须与基类中的定义方式完全匹配，但有一个例外：返回对基类型的引用（或指针）的虚函数。派生类中的虚函数可以返回基类函数所返回类型的派生类的引用（或指针）。
一旦函数在基类中声明为虚函数，它就一直为虚函数派生类重定义虚函数时，可以使用 virtual 保留字，但不是必须这样做。
3*Derived Objects Contain Their Base Classes as Subobjects
C++ 语言不要求编译器将对象的基类部分和派生部分和派生部分连续排列
4*Functions in the Derived May Use Members from the Base
5*A Class Must Be Defined to Be Used as a Base Class
6*Using a Derived Class as a Base Class
7*Declarations of Derived Classes
如果需要声明（但并不实现）一个派生类，则声明包含类名但不包含派生列表
class Bulk_item : public Item_base;//error
class Bulk_item;//ok
class Item_base;

15.2.4. virtual and Other Member Functions
1*Derived to Base Conversions
基类类型引用和指针的关键点在于静态类型（在编译时可知的引用类型或指针类型）和动态类型（指针或引用所绑定的对象的类型这是仅在运行时可知的）可能不同。
2*Calls to virtual Functions May Be Resolved(确定) at Run time
通过基类引用或指针调用基类中定义的函数时，如果调用非虚函数，则无论实际对象是什么类型，都执行基类类型所定义的函数。如果调用虚函数，则直到运行时才能确定调用哪个函数；另一方面，对象是非多态的――对象类型已知且不变。
3*Nonvirtual Calls Are Resolved at Compile Time
4*Overriding the Virtual Mechanism（覆盖虚函数机制）
double d = baseP->Item_base::net_price(42);//将在编译时确定
派生类虚函数调用基类版本时，必须显式使用作用域操作符否则导致无穷递归。
Virtual Functions and Default Arguments
如果一个调用省略了具有默认值的实参，则所用的值由调用该函数的类型定义，与对象的动态类型无关；在同一虚函数的基类版本和派生类版本中使用不同的默认实参几乎一定会引起麻烦

15.2.5. Public, Private, and Protected Inheritance
（1）默认使用private
（2）每个类控制它所定义的成员的访问。派生类可以进一步限制但不能放松对所继承的成员的访问。
（3）派生类是否可访问某成员（数据或方法），主要看此成员在加上派生列表中的访问权限前的权限（在基类中的访问权限）
            用户是否可访问某成员（数据或方法），主要看此成员在加上派生列表中的访问权限后的权限
            基类中的protected给子类的权限也只能通过子类类型访问基类protected成员，不能在自类中通过基类访问基类的protected成员
注意：
（1）
class A{};
class B : private  A{public： virtual    void F(A m){}  };
class C : public   B{public： virtual     void F(A m);    };//报错说明私有继承导致后续类不能连最初的基类A都不能访问，更别说A的成员了，甚至连此处                                                                                         重定义带A参数的函数F都不行；当然可以通过C使用B中的F函数
（2）
               class B {public:   virtual   void FF(){ cout<<"dddd";}};
class C : public  B{private:virtual  void FF(){ cout<<"dddjdd";}};//重载改变访问权限，c.FF()错误，但却可通过多态调用C中的FF
1*Interface versus Implementation Inheritance
public为接口继承
protected，private 实现继承
2*Key Concept: Inheritance versus Composition    IS A（Inheritance ）  Have A（composition）
 3*Exempting Individual Members
派生类可以使用using恢复继承成员的访问级别，但不能使访问级别比基类中原来指定的更严格或更宽松。（在VS2005中可以使权限变宽松或严格，
关键看using出现在派生类中的哪个访问标号后面）
4*Default Inheritance Protection Levels
使用 class 保留字定义的派生默认具有 private 继承，而用 struct 保留字定义的类默认具有 public 继承：
     class Base { /* ... */ };
     struct D1 : Base { /* ... */ };   // public inheritance by default
     class D2 : Base { /* ... */ };    // private       inheritance by default

15.2.6. Friendship and Inheritance
友元关系不能继承。基类的友元对派生类的成员没有特殊访问权限
我是你的朋友，却不一定是你儿子的朋友
我是你的朋友，我儿子不一定是你的朋友
15.2.7. Inheritance and Static Members
如果基类定义 static 成员，则整个继承层次中只有一个这样的成员

15.3. Conversions and Inheritance 
（1）存在从派生类型引用到基类类型引用的自动转换，对指针也类似
（2）不存在从基类引用（或基类指针）到派生类引用（或派生类指针）的（自动）转换
（3）虽然一般可以使用派生类型的对象对基类类型的对象进行初始化或赋值，但，没有从派生类型对象到基类类型对象的直接转换。
15.3.1. Derived-to-Base Conversions
对对象进行初始化和／或赋值以及可以自动转换引用或指针的区别：
Using a Derived Object to Initialize or Assign a Base Object
         实际上是在调用构造函数或赋值操作符 
        第一种（虽然不太可能的）可能性是，基类可能显式定义了将派生类型对象复制或赋值给基类对象的含义
        第二种  基类一般（显式或隐式地）定义自己的复制构造函数和赋值操作符，接受一个形参是基类类型的（const）引用。因为存在从派生类引用                    到基类引用的转换，这些复制控制成员可用于从派生类对象对基类对象进行初始化或赋值
Accessibility of Derived-to-Base Conversion
       从派生类到基类的转换是否访问取决于在派生类的派生列表中指定的访问标号。可以考虑基类的 public 成员是否访问，如果可以，转换是可访问的，否则，转换是不可访问的。（注意用户的权限和派生类的权限还是有些区别的类似12.2.5）
15.3.2. Conversions from Base to Derived
从基类到派生类的自动转换是不存在的。需要派生类对象时不能使用基类对象（指针，引用的转换都没有），甚至当基类指针或引用实际绑定到绑定到派生类对象时，从基类到派生类的转换也存在限制，如果知道转换是安全的，就可以使用 static_cast强制编译器进行转换。或者，可以用 dynamic_cast 申请在运行时进行检查

15.4. Constructors and Copy Control 
构造函数和复制控制成员不能继承，每个类定义自己的构造函数和复制控制成员。不定义会构造。
15.4.1. Base-Class Constructors and Copy Control
基类的构造函数和复制控制基本不受继承的影响
15.4.2. Derived-Class Constructors
1*The Synthesized Derived-Class Default Constructor
除了初始化派生类的数据成员之外，它还初始化派生类对象的基类部分。基类部分由基类的默认构造函数初始化。
2*Defining a Default Constructor
定义时若初始化列表中没有显示初始化基类部分，会自动调用基类的默认构造函数
3*Passing Arguments to a Base-Class Constructor
4*Using Default Arguments in a Derived Constructor
5*Only an Immediate Base Class May Be Initialized
一个类只能初始化自己的直接基类。直接就是在派生列表中指定的类，如C->B->A 类 B 的作者已经指定了怎样构造和初始化 B 类型的对象。像类 B 的任何用户一样，类 C 的作者无权改变这个规约。并且C类的构造函数中也不应修改A类的数据，这是为了尊重基类的接口。
6*Key Concept: Refactoring
重构包括重新定义类层次，将操作和／或数据从一个类移到另一个类。为了适应应用程序的需要而重新设计类以便增加新函数或处理其他改变时，最有可能需要进行重构。
15.4.3. Copy Control and Inheritance
合成操作对对象的基类部分连同派生部分的成员一起进行复制、赋值或撤销，使用基类的复制构造函数、赋值操作符或析构函数对基类部分进行复制、赋值或撤销。类是否需要定义复制控制成员完全取决于类自身的直接成员。基类可以定义自己的复制控制而派生类使用合成版本，反之亦然。
Defining a Derived Copy Constructor
如果派生类定义了自己的复制构造函数，该复制构造函数一般应显式使用基类复制构造函数初始化对象的基类部分（这里就存在将子类引用转换为基类引用），否则会使用基类的默认构造初始化基类部分，这样可能导致数据错位（几部分默认初始化，自己部分却在复制）
Derived-Class Assignment Operator
（1）防止自身赋值
（2）使用基类的赋值函数
Derived-Class Destructor
派生类析构函数不负责撤销基类对象的成员。编译器总是显式调用派生类对象基类部分的析构函数。每个析构函数只负责清除自己的成员：对象的撤销顺序与构造顺序相反：首先运行派生析构函数
15.4.4. Virtual Destructors
（1）   定义虚析构，则删除指针时会动态绑定调用谁的析构函数（当然如果调用的是子类的，那么子类的析构当然包含了基类的析构）
（2）没定义虚析构，则不会动态绑定，根据静态类型调用析构
（3）像其他虚函数一样，析构函数的虚函数性质都将继承C->B->A  则若A虚析构了，则B*指向C时也可实行动态绑定
（4）没了实现析构的动态绑定而基类定义空析构函数时，三法则就不成立了，要理解好三法则的本质
Constructors and Assignment Are Not Virtual
（1）构造函数是在对象完全构造之前运行的，在构造函数运行的时候，对象的动态类型还不完整。
（2）虽然可以在基类中将成员函数 operator= 定义为虚函数，会令人混淆，并且没有用处，每个类都将得到一个虚函数成员，该成员定义了参数为一个基类对象的 operator=。但是，对派生类而言，这个操作符与赋值操作符是不同的。

15.4.5. Virtuals in Constructors and Destructors
（1）构造派生类对象时首先运行基类构造函数。在执行基类构造函数时，对象的派生类部分是未初始化的。实际上，此时对象还不是一个派生类对象
        编译器将对象的类型视为在构造或析构期间发生了变化。在基类构造函数或析构函数中，将派生类对象当作基类类型对象对待
（2）如果在构造函数或析构函数中调用虚函数，则运行的是为构造函数或析构函数自身类型定义的版本   经典eg：
class A{
public:
	A(){F();}
	void F1(){F();}
	~A(){F();}
virtual	void F(){cout<<"F in A";}};
class B : public A{
public:
	void F(){cout<<"F in B";}};//在main中{   B b;   b.F1 ();}    运行结果F in A      F in B    F in A 

15.5. Class Scope under Inheritance
        在继承情况下，派生类的作用域嵌套在基类作用域中。如果不能在派生类作用域中确定名字，就在外围基类作用域中查找该名字的定义，因此派生类可以直接访问基类成员，就好像自己成员一样。
15.5.1. Name Lookup Happens at Compile Time
对象、引用或指针的静态类型决定了对象能够完成的行为
15.5.2. Name Collisions and Inheritance
与基类成员同名的派生类成员将屏蔽对基类成员的直接访问。
Using the Scope Operator to Access Hidden Members
15.5.3. Scope and Member Functions
（1）在基类和派生类中使用同一名字的成员函数，其行为与数据成员一样，屏蔽
（2）编译器一旦在子类中找到了名字，编译器就不再继续查找了。如果参数不符合，立即报错
         局部作用域中声明的函数不会重载全局作用域中定义的函数，同样，派生类中定义的函数也不重载基类中定义的成员
 （3）Overloaded Functions  像其他任意函数一样，成员函数（无论虚还是非虚）也可以重载；如果基类中有一个重载集，子类想使用的话，要么一个         也不重定义，使用基类版本，否则自己重定义几个，就只能使用几个。
        技巧：使用using声明   ，后接base_class::函数名，然后在重定义需要重定义的几个；
15.5.4. Virtual Functions and Scope
要获得动态绑定，必须通过基类的引用或指针调用虚成员。编译器器将在基类中查找函数,而忽略派生类。假定找到了名字，编译器就检查实参是否与形参匹配。
 class Base {
     public:
         virtual int fcn();
     };
     class D1 : public Base {
     public:
          int fcn(int);  // hides fcn in the base; this fcn is not virtual
                            // D1 inherits definition of Base::fcn()
     };
     class D2 : public D1 {
     public:
         int fcn(int); // nonvirtual function hides D1::fcn(int)
         int fcn();    // redefines virtual fcn from Base
     };
***Key Concept: Name Lookup and Inheritance
(1)首先确定进行函数调用的对象、引用或指针的静态类型。
(2)从该类开始一直向上查找，找不到报错
(3)找到后进行常规检查，不合法，报错
(4)合法，如果是虚函数且通过引用或指针调用，则编译器生成代码以确定根据对象的动态类型运行哪个函数版本，否则编译器生成代码直接调用函数

15.6. Pure Virtual Functions
含有（或继承）一个或多个纯虚函数的类是抽象基类
15.7. Containers and Inheritance
使用容器保存对象的指针


15.8. Handle Classes and Inheritance
C++ 中面向对象编程的一个颇具讽刺意味的地方是，不能使用对象支持面向对象编程，C++ 中一个通用的技术是定义包装（cover）类或句柄类
15.8.1. A Pointerlike Handle
Defining the Handle     Sales_item 包括两个成员 一个指向iter_base的指针，一个指向使用计数的指针
Use-Counted Copy Control
Constructing the Handle
15.8.2. Cloning an Unknown Type
要实现接受 Item_base 对象的构造函数，我们不知道给予构造函数的对象的实际类型，通用方法是定义虚操作进行复制，我们称将该操作命名为 clone
为了句柄类，需要从基类开始，在继承层次的每个类型中增加 clone，基类必须将该函数定义为虚函数，每个clone返回类型为此类的指针
Defining the Handle Constructors
掉用实参对象的clone产生虚副本
15.8.3. Using the Handle
Comparing Two Sales_items
Using a Comparator with an Associative Container（使用带关联容器的比较器）
Containers and Handle Classes
Using the Handle to Execute a Virtual Function
总结：
（1）这里的智能指针里保存的是int型use的指针，没有单独定义一个计数类
      13章中智能指针，直接在实际类中使用计数类，并在实际类中自己控制使用计数，这种智能指针不成熟
      14章中智能指针，定义了单独的计数类（其中的计数为int 型），然后由定义一个指针类来管理此计数类，这种方式还算成熟，但这一章中我们将          计数的int型改为int* 就省去了单独定义一个计数类
（2）set可以指定compare函数

15.9. Text Queries Revisited
这是面向对象设计入门的好例子







