12.1. Class Definitions and Declarations
12.1.1. Class Definitions: A Recap
Class Members  成员可以是数据、函数或类型别名；所有成员必须在类的内部声明，一旦类定义完成后，就没有任何方式可以增加成员了。
Constructors
Member Functions   在类内部，声明成员函数是必需的，而定义成员函数则是可选的。在类内部定义的函数默认为 inline
                               成员函数有一个附加的隐含实参，将函数绑定到调用函数的对象
                               关键字 const 加在形参表之后，就可以将成员函数声明为常量：const 成员不能改变其所操作的对象的数据成员。
                               const 必须同时出现在声明和定义中，若只出现在其中一处，就会出现一个编译时错误。

12.1.2. Data Abstraction and Encapsulation
数据抽象是一种依赖于接口和实现分离的编程（和设计）技术
封装是一项低层次的元素组合起来的形成新的、高层次实体珠技术。
vector 同时具备数据抽象和封装的特性，数组在概念上类似于 vector，但既不是抽象的也不是封装的。可以通过访问存放数组的内存来直接操纵数组
1*Access Labels Enforce Abstraction and Encapsulation
    Advice: Concrete and Abstract Types
2*Different Kinds of Programming Roles
在简单的应用程序中，类的使用者和设计者也许是同一个人。即使在这种情况下，保持角色区分也是有益的。设计类的接口时，设计者应该考虑的是如何方便类的使用；使用类的时候，设计者就不应该考虑类如何工作。
&&&Key Concept: Benefits of Data Abstraction and Encapsulation
避免类内部出现无意的、可能破坏对象状态的用户级错误
随时间推移可以根据需求改变或缺陷（bug）报告来完美类实现，而无须改变用户级代码。
12.1.3. More on Class Definitions
1*Multiple Data Members of the Same Type
2*Using Typedefs to Streamline Classes
3*Member Functions May Be Overloaded
4*Explicitly明确地 Specifying inline Member Functions
        可以在类定义体内部指定一个成员为inline，作为其声明的一部分。或者，也可以在类定义外部的函数定义上指定 inline。inline 放在返回类型前
        在类的外部定义 inline 的一个好处是可以使得类比较容易阅读,像其他 inline 一样，inline 成员函数的定义必须在调用该函数的每个源文件中是可见的。不在类定义体内定义的 inline 成员函数，其定义通常应放在有类定义的同一头文件中！！！。

12.1.4. Class Declarations versus Definitions
1*在一个给定的源文件中，一个类只能被定义一次。如果在多个文件中定义一个类，那么每个文件中的定义必须是完全相同的。
2*可以声明一个类而不定义它，这个声明，有时称为前向声明，一般用来编写相互依赖的类，
   在声明之后、定义之前，类是一个不完全类型（incompete type）， 即已知 是一个类型，但不知道包含哪些成员。
  不能定义该类型的对象。只能用于定义指向该类型的指针及引用，或者用于声明（而不是定义）使用该类型作为形参类型或返回类型的函数。
3*为类的成员使用类声明，只要类名一出现就可以认为该类已声明。因此，类的数据成员可以是指向自身类型的指针或引用：


12.1.5. Class Objects
定义对象时，将为其分配存储空间，但（一般而言）定义类型时不进行存储分配：
1*将类的名字直接用作类型名。
2*指定关键字 class 或 struct，后面跟着类的名字
Why a Class Definition Ends in a Semicolon   因为在类定义之后可以接一个对象定义列表。定义必须以分号结束：


12.2. The Implicit隐含的 this Pointer
成员函数不能定义 this 形参，而是由编译器隐含地定义
1*When to Use the this Pointer
*当我们需要将一个对象作为整体引用而不是引用对象的一个成员时。如：该函数返回对调用该函数的对象的引用。
eg：Screen& Screen::set(char c) {contents[cursor] = c;return *this;}可以实现链式表达；
*从 const 成员函数返回 *this
  非 const 成员函数中    this 的类型是一个指向类类型的 const 指针
  在 const 成员函数中，this 的类型是一个指向 const 类类型对象的 const 指针
2*基于 const 的重载
基于成员函数是否为 const，可以重载一个成员函数；同样地，基于一个指针形参是否指向 const，可以重载一个函数。（实参不同可以重载）
const 对象只能使用 const 成员。非 const 对象可以使用任一成员，但非 const 版本是一个更好的匹配。
     Screen myScreen(5,3);
     const Screen blank(5, 3);
     myScreen.set('#').display(cout); // calls nonconst version
     blank.display(cout);             // calls const version

3*Mutable可变 Data Members
Mutable Data Members永远都不能为 const，甚至当它是 const 对象的成员时也如此     eg：mutable size_t access_ctr;
&&&Advice: Use Private Utility Functions for Common Code
       （1）一般愿望是避免在多个地方编写同样的代码。
       （2）随着类的演变而变得更复杂。当所涉及的动作变得更复杂时，只在一处而不是两处编写这些动作有更显著的意义。
       （3）很可能我们会希望在开发时给 do_display 增加调试信息，这些调试信息将会在代码的最终成品版本中去掉。如果只需要改变一个 do_display 的定 义来增加或删除调试代码，这样做将更容易
       （4）这个额外的函数调用不需要涉及任何开销。我们使 do_display 成为内联的，所以调用 do_display 与将代码直接放入 display 操作的运行时性能应该是相同的。

12.3. Class Scope 
1*Using a Class Member
一般的数据或函数成员必须通过对象来访问。定义类型的成员，如 Screen::index，使用作用域操作符来访问。
2*Scope and Member Definitions
3*Parameter Lists and Function Bodies Are in Class Scope
4*Function Return Types Aren't Always in Class Scope
    如果函数在类定义体之外定义，则用于返回类型的名字在类作用域之外。如果返回类型使用由类定义的类型，则必须使用完全限定名

12.3.1. Name Lookup in Class Scope
名字查找：寻找与给定的名字使用相匹配的声明的过程
（1）首先，在使用该名字的块中查找名字的声明。只考虑在该项使用之前声明的名字。
（2）如果找不到该名字，则在包围的作用域中查找。
        如果找不到任何声明，则程序出错。在 C++ 程序中，所有名字必须在使用之前声明。
类定义实际上是在两个阶段中处理：
  （1）首先，编译成员声明；
  （2）只有在所有成员出现之后，才编译它们的定义本身。
类成员声明的名字查找：
（1）检查出现在名字使用之前的类成员的声明。注意是在之前！！！
（2）如果第 1 步查找不成功，则检查包含类定义的作用域中出现的声明以及出现在类定义之前的声明。
类成员定义中的名字查找
（1）首先检查成员函数局部作用域中的声明
（2）如果在成员函数中找不到该名字的声明，则检查对所有类成员的声明（即使成员的声明出现在此函数的定义之前）
（3）如果在类中找不到该名字的声明，则检查在此成员函数定义之前的作用域中出现的声明。（当成员定义在类定义的外部时,不仅要考虑在类定义之        前的全局作用域中的声明，而且要考虑在成员函数定义之前出现的全局作用域声明）
被屏蔽的可已使用 classname::来使用类成员   使用::来使用全局成员

12.4. Constructors
*Constructors May Be Overloaded，Arguments Determine Which Constructor to Use
*Constructors Are Executed Automatically
*Constructors for const Objects     构造函数析构函数均不能定义为const

12.4.1. The Constructor Initializer
与其他函数不同的是，构造函数也可以包含一个构造函数初始化列表，从概念上讲，可以认为构造函数分两个阶段执行：
（1）初始化阶段；（即使不提供初始化列表）
（2）普通的计算阶段。计算阶段由构造函数函数体中的所有语句组成。
         &&&在构造函数初始化列表中没有显式提及的每个成员，使用与初始化变量相同的规则来进行初始化。运行该类型的默认构造函数，来初始化类类型的数据成员。内置或复合类型的成员的初始值依赖于对象的作用域：在局部作用域中这些成员不被初始化，而在全局作用域中它们被初始化为 0。
          &&&有些成员必须在构造函数初始化列表中进行初始化。对于这样的成员，在构造函数函数体中对它们赋值不起作用。没有默认构造函数的类类型的成员，以及 const 或引用类型的成员，不管是哪种类型，都必须在构造函数初始化列表中进行初始化。
         &&&对非类类型的数据成员进行赋值或使用初始化式在结果和性能上都是等价的。
         &&&Advice: Use Constructor Initializers
*Order of Member Initialization
        按照与成员声明一致的次序编写构造函数初始化列表是个好主意。此外，尽可能避免使用成员来初始化其他成员。一般情况下，通过（重复）使用构造函数的形参而不是使用对象的数据成员
*Initializers for Data Members of Class Type
        初始化类类型的成员时，要指定实参并传递给成员类型的一个构造函数

12.4.2. Default Arguments and Constructors
我们更喜欢使用默认实参，因为它减少代码重复，但注意避免二义性出现
12.4.3. The Default Constructor
只要定义一个对象时没有提供初始化式，就使用默认构造函数。为所有形参提供默认实参的构造函数也定义了默认构造函数。
1*The Synthesized Default Constructor
一个类哪怕只定义了一个构造函数，编译器也不会再生成默认构造函数
2*Classes Should Usually Define a Default Constructor
NoDefault 没有默认构造函数，意味着：
（1）具有 NoDefault 成员的每个类的每个构造函数，必须通过传递一个初始的值给 NoDefault 构造函数来显式地初始化 NoDefault 成员。
（2）编译器将不会为具有 NoDefault 类型成员的类合成默认构造函数。如果这样的类希望提供默认构造函数，就必须显式地定义，并且默认构造函数            必须显式地初始化其 NoDefault 成员。
（3）NoDefault 类型不能用作动态分配数组的元素类型
（4）NoDefault 类型的静态分配数组必须为每个元素提供一个显式的初始化式。
（5）如果有一个保存 NoDefault 对象的容器，例如 vector，就不能使用接受容器大小而没有同时提供一个元素初始化式的构造函数。
3*Using the Default Constructor
 // oops! declares a function, not an object
     Sales_item myobj();

12.4.4. Implicit Class-Type Conversions
可以用单个实参来调用的构造函数定义了从形参类型到该类类型的一个隐式转换。
Supressing(抑制) Implicit Conversions Defined by Constructors
可以通过将构造函数声明为 explicit，来防止在需要隐式转换的上下文中使用构造函数：
explicit 关键字只能用于类内部的构造函数声明上。在类的定义体外部所做的定义上不再重复它：
Explicitly Using Constructors for Conversions
通常，单形参构造函数应该为 explicit。将构造函数设置为 explicit 可以避免错误，并且当转换有用时，用户可以显式地构造对象。

12.4.5. Explicit Initialization of Class Members
对于没有定义构造函数!!!并且其全体数据成员均为 public 的类，可以采用与初始化数组元素相同的方式初始化其成员：
显式初始化类类型对象的成员有三个重大的缺点。
(1)要求类的全体数据成员都是 public
(2)将初始化每个对象的每个成员的负担放在程序员身上。这样的初始化是乏味且易于出错的，因为容易遗忘初始化式或提供不适当的初始化式。
(3)如果增加或删除一个成员，必须找到所有的初始化并正确更新。

12.5. Friends
友元的声明以关键字 friend 开始。它只能出现在类定义的内部。友元声明可以出现在类中的任何地方：友元不是授予友元关系的那个类的成员，所以它       们不受声明出现部分的访问控制影响。
友元可以是普通的非成员函数，或前面定义的其他类的成员函数，或整个类。将一个类设为友元，友元类的所有成员函数都可以访问授予友元关系的那       个类的非公有成员。
 class Screen {
         // Window_Mgrmust be defined before class Screen
         friend Window_Mgr&
             Window_Mgr::relocate(Window_Mgr::index,
                                  Window_Mgr::index,
                                  Screen&);
         // ...restofthe Screen class
     };
Friend Declarations and Scope
&&&注意友元声明与友元定义之间的互相依赖。在前面的例子中，类 Window_Mgr 必须先定义。否则，Screen 类就不能将一个 Window_Mgr 函数指定为友元。然而，只有在定义类 Screen 之后，才能定义 relocate 函数――毕竟，它被设为友元是为了访问类 Screen 的成员。
&&&友元声明将已命名的类或非成员函数引入到外围作用域中。此外，友元函数可以在类的内部定义，该函数的作用域扩展到包围该类定义的作用域。
&&&Overloaded Functions and Friendship   类必须将重载函数集中每一个希望设为友元的函数都声明为友元：

12.6. static Class Members
类可以定义共享的 static 数据成员，也可以定义 static 成员函数。static 成员函数没有 this 形参，它可以直接访问所属类的 static 成员，但不能直接使用非 static 成员。
Advantages of Using Class static Members
(1)static 成员的名字是在类的作用域中，因此可以避免与其他类的成员或全局对象名字冲突。
(2)可以实施封装。static 成员可以是私有成员，而全局对象不可以。
(3)通过阅读程序容易看出 static 成员是与特定类关联的。这种可见性可清晰地显示程序员的意图。

12.6.1. static Member Functions
当我们在类的外部定义 static 成员时，无须重复指定 static 保留字，该保留字只出现在类定义体内部的声明处：
&&&static Functions Have No this Pointer  
通过使用非 static 成员显式或隐式地引用 this 是一个编译时错误。因为 static 成员不是任何对象的组成部分，所以 static 成员函数不能被声明为 const。毕竟，将成员函数声明为 const 就是承诺不会修改该函数所属的对象。最后，static 成员函数也不能被声明为虚函数

12.6.2. static Data Members
1*static 数据成员必须在类定义体的外部定义（正好一次）。不像普通数据成员，static 成员不是通过类构造函数进行初始化，而是应该在定义时进行初始化。保证对象正好定义一次的最好办法，就是将 static 数据成员的定义放在包含类非内联成员函数定义的文件中。
先指定类型名，接着是成员的完全限定名。
double Account::interestRate = initRate();//一旦成员名出现，static 成员的就是在类作用域中。static 关键字只能用于类定义体内部的声明中
CA       Account::a(2，2) ;                             //假设CA有一个接受2个int的构造函数，当然double Account::interestRate（2.0）也对
2*Integral const static Members Are Special
一般而言，类的 static 成员，像普通数据成员一样，不能在类的定义体中初始化,static 数据成员通常在定义时才初始化。static整型常量表达式，可以在类的定义体中进行初始化(char 型也可以)：
static const int period = 30; 
static const char ch='&';
用常量值初始化的整型 const static 数据成员是一个常量表达式。它可以用在任何需要常量表达式的地方，例如指定数组成员 daily_tbl 的维。
在类内部提供初始化式时，成员的定义不必再指定初始值: const int Account::period;(vs2005下即使不指定初值也是为重定义报错)
3*static Members Are Not Part of Class Objects
static 数据成员的类型可以是该成员所属的类类型,  类似地，static 数据成员可用作默认实参：











