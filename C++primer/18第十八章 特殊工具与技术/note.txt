18.1. Optimizing Memory Allocation
18.1.1. Memory Allocation in C++
C++ provides two ways to allocate and free unconstructed, raw memory（未构造的原是内存）
（1）allocator 类，这个类支持一个抽象接口，以分配内存并随后使用该内存保存对象
（2）标准库中的 operator new 和 operator delete，它们分配和释放需要大小的原始的、未类型化的内存。
C++ also provides various ways to construct and destroy objects in raw memory:
（1）allocator 类定义了名为 construct 和 destroy 的成员
（2）定位 new 表达式接受指向未构造内存的指针，并在该空间中初始化一个对象或一个数组。
（3）可以直接调用对象的析构函数来撤销对象。运行析构函数并不释放对象所在的内存
（4）算法 uninitialized_fill 和 uninitialized_copy 像 fill 和 copy 算法一样执行，除了它们的目的地构造对象而不是给对象赋值之外。
18.1.2. The allocator Class
allocator<T> a;
a.allocate(n)          分配原始的未构造内存以保存 T 类型的 n 个对象
a.deallocate(p, n）释放内存，在名为 p 的 T* 指针中包含的地址处保存 T 类型的 n 个对象，在此之前必须保证这些对象已经destroy。
a.construct(p, t)
a.destroy(p)
uninitialized_copy(b, e, b2)  b2 开始的未构造的原始内存中，构造而非赋值
uninitialized_fill(b, e, t)          b, e的未构造的原始内存中，用复制构造函数构造对象
uninitialized_fill_n(b, e, t, n)   b 和 e 指出的范围中至多 n 个对象初始化为 t 的副本。假定范围至少为 n 个元素大小。使用复制构造函数构造对象
allocator 类将内存分配和对象构造分开，它分配的内存是未构造的，allocator 的用户必须分别 construct 和 destroy 放置在该内存中的对象。
Using allocator to Manage Class Member Data
Using construct
Reallocating and Copying Elements
18.1.3. operator new and operator delete Functions
string * sp = new string("initialized");
(1)该表达式调用名为 operator new 的标准库函数，分配足够大的原始的未类型化的内存，以保存指定类型的一个对象；
(2)运行该类型的一个构造函数，用指定初始化式构造对象；
(3)最后，返回指向新分配并构造的对象的指针。
 delete sp;
(1)对 sp 指向的对象运行适当的析构函数；
(2)通过调用名为 operator delete 的标准库函数释放该对象所用内存。
Terminology: new Expression versus operator new Function
标准库中的new函数没有重载 new 或 delete 表达式，实际上，我们不能重定义 new 和 delete 表达式的行为。
The operator new and operator delete Interface
 void *operator new(size_t);       // allocate an object
 void *operator new[](size_t);     // allocate an array
 void *operator delete(void*);     // free an object
 void *operator delete[](void*);   // free an array
它们在 void* 指针而不是类型化的指针上进行操作。
Using the Allocation Operator Functions
T* newelements = static_cast<T*>(operator new[](newcapacity * sizeof(T)));
operator delete[](elements);
18.1.4. Placement new Expressions
定位 new 表达式使我们能够在特定的、预分配的内存地址构造一个对象。
new (place_address) type
new (place_address) type (initializer-list)
eg：：  new (first_free) T(t);
定位 new 表达式初始化一个对象的时候，它可以使用任何构造函数，并直接建立对象。construct 函数总是使用复制构造函数。对某些类而言，使用复制构造函数是不可能的（因为复制构造函数是私有的），或者是应该避免的，在这种情况下，也许有必要使用定位 new 表达式。
new (sp) string(b, e);                          // construct directly in place
alloc.construct(sp + 1, string(b, e));   // build and copy a temporary
18.1.5. Explicit Destructor Invocation
p->~T(); 
18.1.6. Class Specific new and delete
*通过定义自己的名为 operator new 和 operator delete 的成员，类可以管理用于自身类型的内存。
*优化 new 和 delete 的行为的时候，只需要定义 operator new 和 operator delete 的新版本，new 和 delete 表达式自己照管对象的构造和撤销。
*如果类定义了这两个成员中的一个，它也应该定义另一个。
类成员 operator new 函数必须具有返回类型 void* 并接受 size_t 类型的形参
类成员 operator delete 函数必须具有返回类型 void。它可以定义为接受单个 void* 类型形参，也可以定义为接受两个形参，即 void* 和 size_t 类型
这些成员隐式为静态的不用显示声明
Array Operator new[] and Operator delete[]形参和返回值与上面一样
Overriding Class-Specific Memory Allocation
可以通过全局作用域来调用库函数
 Type *p = ::new Type; // uses global operator new
 ::delete p;           // uses global operator delete
18.1.7. A Memory-Allocator Base Class
所采用的策略被称为维持一个自由列表。可以将自由列表实现为已分配但未构造的对象的链表。


18.2. Run-Time Type Identification
Run-time Type Identification (RTTI)，通过下面两个操作符提供 RTTI，带虚的在编译时执行RTTI，其他的在编译时执行RTTI
（1）typeid 操作符，返回指针或引用所指对象的实际类型
（2）dynamic_cast 操作符，将基类类型的指针或引用安全地转换为派生类型的指针或引用。
18.2.1. The dynamic_cast Operator
最好时使用动态绑定，当不能使用动态绑定时（如无法在基类中增加虚成员，带在子类中又需要），就可以使用动态绑定：
首先验证被请求的转换是否有效，只有转换有效，操作符才实际进行转换如果无效，指针则返回0，引用则抛出bad_cast类型的异常，因此转换引用时一般可使用结构try{}catch（std：：bad_cast&  bc）
Using the dynamic_cast Operator
if (Derived *derivedPtr = dynamic_cast<Derived*>(basePtr))
     {
         // use the Derived object to which derivedPtr points
     } else { // BasePtr points at a Base object
         // use the Base object to which basePtr points
     }
Using a dynamic_cast and Reference Types
dynamic_cast< Type& >(val)
只有当 val 实际引用一个 Type 类型对象，或者 val 是一个 Type 派生类型的对象的时候，dynamic_cast 操作才将操作数 val 转换为想要的 Type& 类型当转换失败的时候，它抛出一个 std::bad_cast 异常
总结：在vs2005当中，只有含蓄成员的才能实现动态转换，且会检查参数所指对象是否为type类型，或type的子类
18.2.2. The typeid Operator
   typeid(e)这里 e 是任意表达式或者是类型名。可用
Using the typeid Operator
当 typeid 的操作数是带虚函数的类类型的对象的时候，才返回动态类型信息。测试指针返回指针的静态的、编译时类型。
如果指针 p 的值是 0，那么，如果 p 的类型是带虚函数的类型，则 typeid(*p) 抛出一个 bad_typeid 异常；如果 p 的类型没有定义任何虚函数，则结果与 p 的值是不相关的
18.2.3. Using RTTI
18.2.4. The type_info Class
type_info 类的确切定义随编译器而变化，但是，标准保证所有的实现将至少提供：
t1 == t2
t1 != t2
t.name()
t1.before(t2)       返回指出 t1 是否出现在 t2 之前的 bool 值。before 强制的次序与编译器有关
因为打算作基类使用，type_info 类也提供公用虚析构函数，默认构造函数和复制构造函数以及赋值操作符都定义为 private，所以不能定义或复制 type_info 类型的对象。程序中创建 type_info 对象的唯一方法是使用 typeid 操作符。

18.3. Pointer to Class Member
成员指针只应用于类的非 static 成员，static 成员指针是普通指针
18.3.1. Declaring a Pointer to Member
Defining a Pointer to Data Member
 TypeName   ClasssName::*p=.......
Defining a Pointer to Member Function
(1)函数形参的类型和数目，包括成员是否为 const
(2)返回类型。
(3)所属类的类型。
ReturnType  (ClassName::*p)() [const]=.......
调用操作符的优先级高于成员指针操作符，因此，包围 Screen::* 的括号是必要的
Using Typedefs for Member Pointers
成员指针可用来作为函数的参数和返回类型
18.3.2. Using a Pointer to Class Member
成员指针解引用操作符（.*）
成员指针箭头操作符（->*）
Using a Pointer to Member Function
char (Screen::*pmf)() const = &Screen::get;
char c2 = (myScreen.*pmf)(); 
        c2 = (pScreen->*pmf)();  
Using a Pointer to Data Member
Screen::index Screen::*pindex = &Screen::width;
Screen::index ind1 = myScreen.width; 
Pointer-to-Member Function Tables
函数指针和成员函数指针的一个公共用途是，将它们存储在函数表中，函数表是函数指针的集











