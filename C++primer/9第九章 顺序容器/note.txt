9.1
9.1.1
顺序容器（sequential container）
      1 顺序容器的元素排列次序与元素值无关，而是由元素添加到容器里的次序决定

      2vector  支持快速随机访问 
        list  支持快速插入/删除
       deque（是双端队列“double-ended queue”的简写，发音为“deck”）

     3容器适配器（adaptors）
       stack  后进先出（LIFO）堆栈
      queue  先进先出（FIFO）队列
      priority_queue 有优先级管理的队列

   4所有容器类型都定义了默认构造函数，用于创建指定类型的空容器对象。默认构造函数不带参数。 为了使程序更清晰、简短，容器类型最常用的构     造函数是默认构造函数。在大多数的程序中，使用默认构造函数能达到最佳运行时性能，并且使容器更容易使用。

  5构造函数 
   C<T> c;   适用于所有容器
   C c(c2);   适用于所有容器     容器类型和元素类型都必须相同
   C c(b e);   适用于所有容器    不要求容器类型相同。容器内的元素类型也可以不相同，只要它们相互兼容。允许通过使用内置数组中的一对指针初始                                               化容器
   C c(n t);   只适用于顺序容器  不提供元素初始化式时，这种类型的初始化，元素类型必须是内置或复合类型，或者是提供了默认构造函数的类类型。                  如果元素类型没有默认构造函数，则必须显式指定其元素初始化式。 
                  const list<int>::size_type list_size = 64; 
                   list<string> slist(list_size, "eh?"); // 64 strings, each is eh? 
   C c(n);     只适用于顺序容器 


9.1.2  容器内元素的类型约束 
1容器元素类型必须满足以下两个约束： 
（1）元素类型必须支持赋值运算。 
（2）元素类型的对象必须可以复制。
?除了引用类型外，所有内置或复合类型都可用做元素类型。引用不支持一般意义的赋值运算，因此没有元素是引用类型的容器
?除输入输出（IO）标准库类型（以及第 17.1.9 节介绍的 auto_ptr 类型）之外，所有其他标准库类型都是有效的容器元素类型。因为iostream对象不支  持复制和赋值操作
?特别地，容器本身也满足上述要求，因此，可以定义元素本身就是容器类型的容器。
  注意，在指定容器元素为容器类型时，必须如下使用空格： 
     vector< vector<string> > lines; // ok: space required between close > 否则看做右移
?此外，一些容器操作对元素类型还有特殊要求

9.2. 迭代器和迭代器范围 
1常用迭代器运算
*iter  返回迭代器 iter 所指向的元素的引用 
iter->mem  对 iter 进行解引用，获取指定元素中名为 mem 的成员
*iter  返回迭代器 iter 所指向的元素的引用 
++iter    iter++  给 iter 加 1，使其指向容器里的下一个元素 
--iter      iter--    给 iter 减 1，使其指向容器里的前一个元素 
iter1 == ter2     比较两个迭代器是否相等（或不等）。当两个迭代器指向同一个
iter1 != iter2      容器中的同一个元素，或者当它们都指向同一个容器的超出末端的下一位置时，两个迭代器相等 
2vector 和  deque 容器的迭代器提供额外的运算 
iter + n 
iter - n   在迭代器上加（减）整数值 n，将产生指向容器中前面（后面）第 n个元素的迭代器。新计算出来的迭代器必须指向容器中的元素或超出
             容器末端的下一位置        只适用于 vector 和 deque 容器 

iter1 - iter2    两个迭代器的减法，其运算结果加上右边的迭代器即得左边的迭代器。这两个迭代器必须指向同一个容器中的元素或超出容器末端的下
                     一位置          只适用于 vector 和 deque 容器 
>, >=, 
<, <=    迭代器的关系操作符。当一个迭代器指向的元素在容器中位于另一个迭代器指向的元素之前，则前一个迭代器小于后一个迭代器。关系操
             作符的两个迭代器必须指向同一个容器中的元素或超出容器末端的下一位置            只适用于 vector 和 deque 容器 

9.2.1.  迭代器范围

9.2.2.  使迭代器失效的容器操作 
1容器定义的类型别名 2+4+3=9

size_type  无符号整型，足以存储此容器类型的最大可能容器长度 
difference_type  足够存储两个迭代器差值的有符号整型，可为负数 

iterator  此容器类型的迭代器类型 
const_iterator  元素的只读迭代器类型 
reverse_iterator  按逆序寻址元素的迭代器 
const_reverse_iterator  元素的只读（不能写）逆序迭代器 

value_type  元素类型 
reference  元素的左值类型，是 value_type& 的同义词 
const_reference  元素的常量左值类型，等效于 const value_type& 
 
9.3.3.  在顺序容器中添加元素
1关键概念：容器元素都是副本
c.push_back(t)  返回 void 类型 
c.push_front(t) 返回 void 类型 只适用于 list 和 deque 容器类型. 
c.insert(p,t)  在迭代器 p 所指向的元素前面插入值为 t 的新元素。返回指向新添加元素的迭代器 
c.insert(p,n,t) 在迭代器 p 所指向的元素前面插入 n 个值为 t 的新元素。返回 void 类型 
c.insert(p,b,e) 在迭代器 p 所指向的元素前面插入由迭代器 b 和 e 标记的范围内的元素。返回 void 类型 
***no push_front on vector but we can insert before begin() ， inserting anywhere but at the end of a vector is an expensive operation 
2添加元素可能会使迭代器失效 ，避免存储  end   操作返回的迭代器 

9.3.4.  关系操作符 
容器的比较是基于容器内元素的比较，比较条件：两容器必须完全相同，并且其中的元素支持这样的操作

9.3.5.  容器大小的操作
1顺序容器的大小操作 
c.size()           返回容器 c 中的元素个数。返回类型为 c::size_type 
c.max_size()  返回容器 c 可容纳的最多元素个数，返回类型为 c::size_type 
c.empty()      返回标记容器大小是否为 0 的布尔值 
c.resize(n)     调整容器 c 的长度大小，使其能容纳 n 个元素，如果 n < c.size()，则删除多出来的元素；否则，添加采用值初始化的新元素 
c.resize(n,t)  调整容器 c 的长度大小，使其能容纳 n 个元素。所有新添加的元素值都为 t （注意时新添加的）

9.3.6.  访问元素 
c.back()  返回容器 c 的最后一个元素的引用。如果 c 为空，则该操作未定义 
c.front()  返回容器 c 的第一个元素的引用。如果 c 为空，则该操作未定义
c[n]        返回下标为 n 的元素的引用 如果 n <0 或 n >= c.size()，则该操作未定义     只适用于 vector 和 deque 容器 
c.at(n)    返回下标为 n 的元素的引用。如果下标越界，则该操作未定义                      只适用于 vector 和 deque 容器 
              使用下标运算的另一个可选方案是 at 成员函数（表 9.9）。这个函数的行为和下标运算相似，但是如果给出的下标无效，at 函数将会抛出                    out_of_range 异常： 

9.3.7.删除元素 
c.erase(p)  删除迭代器 p 所指向的元素 返回一个迭代器，它指向被删除元素后面的元素。如果 p 指向容器内的最后一个元素，则返回的迭代器指向容                  器的超出末端的下一位置。如果 p 本身就是指向超出末端的下一位置的迭代器，则该函数未定义 
c.erase(b,e)  删除迭代器 b 和 e 所标记的范围内所有的元素 返回一个迭代器，它指向被删除元素段后面的元素。如果 e 本身就是指向超出末端的下一                    位置的迭代器，则返回的迭代器也指向容器的超出末端的下一位置 
c.clear()          删除容器 c 内的所有元素。返回 void 
c.pop_back()  删除容器 c 的最后一个元素。返回 void。如果 c 为空容器，则该函数未定义 
c.pop_front()  删除容器 c 的第一个元素。   返回 void。   如果 c 为空容器，则该函数未定义        只适用于 list 或 deque 容器 
***由上可见vector虽说不能在头部直接添加删除元素（可以间接添加删除），但可以直接访问元素
***pop_front 和 pop_back 函数的返回值并不是删除的元素值，而是 void。要获取删除的元素值，则必须在删除元素之前调用 

9.3.8.  赋值与  swap 
c1 = c2         删除容器 c1 的所有元素，然后将 c2 的元素复制给 c1。c1 和c2 的类型（包括容器类型和元素类型）必须相同 
c1.swap(c2)  交换内容：调用完该函数后，c1 中存放的是 c2 原来的元素，c2 中存放的则是 c1 原来的元素。c1 和 c2 的类型必须相同。
                                      该函数的执行速度通常要比将 c2 复制到 c1 的操作快 ，迭代器不会失效
c.assign(b,e)  重新设置 c 的元素：将迭代器 b 和 e 标记的范围内所有的元素复制到 c 中。b 和 e 必须不是指向 c 中元素的迭代器 
c.assign(n,t)  将容器 c 重新设置为存储 n 个值为 t 的元素

9.4. vector 容器的自增长 
在实际应用中， 比起 list 和 deque 容器，vector 的增长效率通常会更高
9.4.1. capacity 和  reserve 成员 ，仅仅是vector才有
ivec.capacity()//注意这和max_size完全是两回事，max_size是一个相当大的数
ivec.reserve(n)

******************总结******************
构造5，插入5，删除5，访问4，size5，
赋值，swap， assign2，    
 vector    capacity,reserve

9.5. 容器的选用
1
list          不连续，快速随机添加删除，不支持随机访问
vector    连续  ， 缓慢随机添加删除，快速随机访问
deque     连续 ， 更缓慢随机添加删除（在头部的操作，优于vector），快速随机访问
2
***通常来说，除非找到选择使用其他容器的更好理由，否则 vector 容器都是最佳选择。 
***如果只需在读取输入时在容器的中间位置插入元素， 然后需要随机访问元素，则可考虑在输入时将元素读入到一个 list 容器，接着对此容器重新
     排序， 使其适合顺序访问， 然后将排序后的 list 容器复制到一个 vector 容器。 
***如果程序既需要随机访问又必须在容器的中间位置插入或删除元素,则取决于下面两种操作付出的相对代价
*** 如果无法确定某种应用应该采用哪种容器，使用迭代器，而不是下标，并且避免随机访问元素。这样编写，在必要时，可很方便地将程序从使用           vector 容器修改为使用 list 的容器。


9.6. 再谈 string 类型 
string s;  定义一个新的空 string 对象，命名为 s 
string s(cp);  定义一个新的 string 对象，用 cp 所指向的（以空字符 null 结束的）C 风格字符串初始化该对象 
string s(s2);  定义一个新的 string 对象，并将它初始化为 s2 的副本 
is >> s;        从输入流 is 中读取一个以空白字符分隔的字符串，写入 s 
os << s;       将 s 写到输出流 os 中 
getline(is, s)  从输入流 is 中读取一行字符，写入 s 
s1 + s2         把 s1 和 s2 串接起来，产生一个新的 string 对象 
s1 += s2       将 s2 拼接在 s1 后面 
关系操作符   相等运算（== 和 !=）以及关系运算（<、<=、> 和 >=）都可用于 string 对象的比较，等效于（区分大小写的）字典次序的比较 


***除了一些特殊操作，string 类型提供与 vector 容器相同的操作，且也是采用顺序存储。
       string 类型与 vector 容器不同的是，它不支持以栈方式操纵容器： 在 string 类型 中不能使用
       front、 back 、 pop_back 、pop_front 、push_front、 操作（ push_back却可以)。


9.6.1. 构造 string 对象的其他方法 
无string（n）  却有
string（cp）                                                     //要求以空字符结束。复制这个数组的所有字符，但不包括结束符 null
string（cp，n）
string s(s2, pos2) 
string s(s2, pos2, len2) 
如果 pos2 > s2.size()     则该操作未定义，无论 len2 的值是多少，最多只能复制 s2.size() - pos2 个字符

9.6.2. 修改 string 对象的其他方法 
*插入
无  push_front却有
s.insert(pos, s2)                    在下标为 pos 的元素之前插入 string 对象 s2 的副本 
s.insert(pos, s2, pos2, len)    在下标为 pos 的元素之前插入 s2 中从下标 pos2 开始的 len 个字符 
s.insert(pos, cp, len)             在下标为 pos 打元素之前插入 cp 所指向数组的前 len 个字符 
s.insert(pos, cp)                   在下标为 pos 的元素之前插入 cp 所指向的以空字符结束的字符串副本 
*删除
无  pop_front，pop_back却有
s.erase(pos, len)  删除从下标 pos 开始的 len 个字符 
*访问
无front，back
*size    复制   swap   相同
*assign都有却还有
s.assign(s2)  用 s2 的副本替换 s 
s.assign(s2, pos2, len) 用 s2 中从下标 pos2 开始的 len 个字符副本替换 s
s.assign(cp, len)  用 cp 所指向数组的前 len 个字符副本替换 s 
s.assign(cp)  用 cp 所指向的以空字符结束的字符串副本替换 s 

9.6.3. 只适用于 string 类型的操作 
1 substr 操作 
s.substr(pos, n) 返回一个 string 类型的字符串，它包含 s 中从下标 pos 开始的 n 个字符 
s.substr(pos)  返回一个 string 类型的字符串，它包含从下标 pos 开始到s 末尾的所有字符 
s.substr()  返回 s 的副本  
2     append（6个） 和 replace（10个） 函数 
s.append( args)             将 args 串接在 s 后面。返回 s 引用 
s.replace(pos, len, args) 删除 s 中从下标 pos 开始的 len 个字符，用 args 指定的字符替换之。返回 s 的引用 在这个版本中，args 不能为 b2，e2 
s.replace(b, e, args)       删除迭代器 b 和 e 标记范围内所有的字符，用 args 替换之。返回 s 的引用 在这个版本中，             args 不能为 s2，pos2，len2 

args
s2  string 类型的字符串 s2 
s2, pos2, len2  字符串 s2 中从下标 pos2 开始的 len2 个字符 
cp  指针 cp 指向的以空字符结束的数组 
cp, len2  cp 指向的以空字符结束的数组中前 len2 个字符 
n, c  字符 c 的 n 个副本 
b2, e2  迭代器 b2 和 e2 标记的范围内所有字符 

9.6.4. string 类型的查找操作 
1全都返回 string::size_type   或者返回一个名为 string::npos 的特殊值，每个都有四个重载版本
s.find( args)  在 s 中查找 args 的第一次出现 
s.rfind( args)  在 s 中查找 args 的最后一次出现 
s.find_first_of( args)  在 s 中查找 args 的任意字符的第一次出现
s.find_last_of( args)  在 s 中查找 args 的任意字符的最后一次出
s.find_first_not_of( args) 在 s 中查找第一个不属于 args 的字符 
s.find_last_not_of( args)  在 s 中查找最后一个不属于 args 的字符 

args   如果下面的pos的值为string::npos 那么返回结果也是npos
c, pos  在 s 中，从下标 pos 标记的位置开始，查找字符 c。pos 的默认值为 0 
s2, pos  在 s 中， 从下标 pos 标记的位置开始， 查找 string 对象 s2。 pos 的默认值为 0 
cp, pos  在 s 中，从下标 pos 标记的位置形参，查找指针 cp 所指向的 C 风格的以空字符结束的字符串。pos 的默认值为 0 
cp, pos, n 在 s 中，从下标 pos 标记的位置开始，查找指针 cp 所指向数组的前 n 个字符。pos 和 n 都没有默认值 


9.6.5. 字符串比较 
1（==）（!=）（<、<=、>、>=）

2 compare 函数 （3+3）
s.compare(s2)                     比较 s 和 s2 
s.compare(pos1, n1, s2)           让 s 中从 pos 下标位置开始的 n1 个字符与 s2 做比较 
s.compare(pos1, n1, s2, pos2, n2) 让 s 中从 pos1 下标位置开始的 n1 个字符与 s2 中从 pos2 下标位置开始的 n2 个字符做比较 
s.compare(cp)                     比较 s 和 cp 所指向的以空字符结束的字符串 
s.compare(pos1, n1, cp)           让 s 中从 pos1 下标位置开始的 n1 个字符与 cp 所指向的字符串做比较 
s.compare(pos1, n1, cp, n2)       让 s 中从 pos1 下标位置开始的 n1 个字符与 cp 所指向的字符串的前 n2 个字符做比较 
 
9.7. 容器适配器 
除了顺序容器，标准库还提供了三种顺序容器适配器：queue、priority_queue 和 stack。

1适配器通用的操作和类型 
size_type  一种类型，足以存储此适配器类型最大对象的长度 
value_type  元素类型 
container_type  基础容器的类型，适配器在此容器类型上实现 
A a;  创建一个新空适配器，命名为 a 
A a(c);  创建一个名为 a 的新适配器，初始化为容器 c 的副本 
关系操作符  所有适配器都支持全部关系操作符：==、 !=、 <、 <=、 >、>= 


2适配器的初始化 
默认构造函数用于创建空对象，而带一个容器参数的构造函数将参数容器的副本作为其基础值

3覆盖基础容器类型 
默认的 stack 和 queue 都基于 deque 容器实现，
       priority_queue 则在 vector 容器上实现。
在创建适配器时，通过将一个顺序容器指定为适配器的第二个类型实参，可覆盖其关联的基础容器类型： 
stack 适配器所关联的基础容器可以是任意一种顺序容器类型。
queue 适配器要求其关联的基础容器必须提供 push_front 运算，因此只能建立在 list 容器上，而不能建立在 vector 容器上
priority_queue 适配器要求提供随机访问功能，因此可建立在 vector 或 deque 容器上，但不能建立在 list 容器上。

4适配器的关系运算 
两个相同类型的适配器（==）（!=）（<、<=、>、>=）只要基础元素类型支持等于和小于操作符既可。
这些关系运算由元素依次比较来实现。第一对不相等的元素将决定两者之间的小于或大于关系。 


9.7.1. 栈适配器 
1栈容器适配器支持的操作 
s.empty()  如果栈为空，则返回 true，否则返回 stack
s.size()  返回栈中元素的个数 
s.pop()  删除栈顶元素的值，但不返回其值 
s.top()  返回栈顶元素的值，但不删除该元素
s.push(item)  在栈顶压入新元素 
**默认情况下，栈适配器建立在 deque 容器上，因此采用 deque 提供的操作来实现栈功能，尽管栈是以 deque 容器为基础实现的，但程序员不能直接访问 deque 所提供的操作


9.7.2. 队列和优先级队列 
标准库提供了两种风格的队列：FIFO 队列（FIFO queue，简称 queue），以及优先级队列（priority queue）。
priority_queue 允许用户为队列中存储的元素设置优先级。这种队列不是直接将新元素放置在队列尾部，而是放在比它优先级低的元素前面。


q.empty()  如果队列为空，则返回 true，否则返回 false 
q.size()  返回队列中元素的个数 
q.pop()  删除队首元素，但不返回其值 
q.top()  返回具有最高优先级的元素值，但不删除该元素 该操作只适用于优先级队列 ！！！
q.push(item)  对于 queue，在队尾压入一个新元素，对于 priority_quue，在基于优先级的适当位置插入新元素 

q.front()  返回队首元素的值，但不删除该元素 该操作只适用于队列 
q.back()  返回队尾元素的值，但不删除该元素 该操作只适用于队列 






