******************The argument to insert is fairly unwieldy********************
1 use make_pair:
word_count.insert(make_pair("Anna", 1));
2 use a typedef:
typedef map<string,int>::value_type valType;
 word_count.insert(valType("Anna", 1));

******************find********************
 if (word_count.count("foobar")) occurs = word_count["foobar"];   //find twice 

map<string,int>::iterator it = word_count.find("foobar");         //find  once
 if (it != word_count.end()) occurs = it->second;
******************multimap find********************
1
     string search_item("Alain de Botton");
     typedef multimap<string, string>::size_type sz_type;
     sz_type entries = authors.count(search_item);
     multimap<string,string>::iterator iter =authors.find(search_item);
     for (sz_type cnt = 0; cnt != entries; ++cnt, ++iter) cout <<iter->second << endl; // print each title
     如果 count 返回 0 值，则该循环永不执行。
2
     // definitions of authors and search_item as above
     // beg and end denote range of elements for this author
     typedef multimap<string, string>::iterator authors_it;
     authors_it beg = authors.lower_bound(search_item),
                end = authors.upper_bound(search_item);
     // loop through the number of entries there are for this author
     while (beg != end) {
         cout << beg->second << endl; // print each title
         ++beg;
     }
3
     // definitions of authors and search_item as above
     // pos holds iterators that denote range of elements for this key
     pair<authors_it, authors_it>pos = authors.equal_range(search_item);
     // loop through the number of entries there are for this author
     while (pos.first != pos.second) {
         cout << pos.first->second << endl; // print each title
         ++pos.first;
     }





















