Chapter 11. Generic Algorithms

11.1. Overview
*Key Concept: Algorithms Never Execute Container Operations
    泛型算法本身从不执行容器操作，只是单独依赖迭代器和迭代器操作实现,本质上暗示了：使用“普通”的迭代器时，算法从不修改基础容器的大小,算法也许会改变存储在容器中的元素的值，也许会在容器内移动元素，但是，算法从不直接添加或删除元素。
    另一种特殊的迭代器类：插入器（inserter），在给这类迭代器赋值时，在基础容器上将执行插入运算。如果算法操纵这类迭代器，迭代器将可能导致在容器中添加元素。但是，算法本身从不这么做。



11.2. A First Look at the Algorithms
*使用泛型算法必须包含 algorithm 头文件： #include <algorithm>
*标准库还定义了一组泛化的算术算法（generalized numeric algorithm），#include <numeric>
*理解算法的最基本方法是了解该算法是否读元素、写元素或者对元素进行重新排序

11.2.1. Read-Only Algorithms
1find 
     使用两个迭代器和一个值调用 find 函数，只要找到与给定值相等的元素，find 就会返回指向该元素的迭代器。如果没有匹配的元素，find 就返回它的第二个迭代器实参，表示查找失败。
2accumulate ,defined in the numeric header  第三个实参用作累加的起点
          eg:int sum = accumulate(vec.begin(), vec.end(), 42);
3Using find_first_of
       在第一段范围内查找与第二段范围中任意元素匹配的元素，然后返回一个迭代器，指向第一个匹配的元素。如果找不到元素，则返回第一个范围的 end 迭代器

11.2.2. Algorithms that Write Container Elements
1写入输入序列的元素
   本质上是安全的――只会写入与指定输入范围数量相同的元素。
    fill(vec.begin(), vec.end(), 0); // reset each element to 0
2不检查写入操作的算法
    参数包括：一个迭代器、一个计数器以及一个值(也可以使两个迭代器，一个值)
    vector<int> vec; // empty vector
     // disaster: attempts to write to 10 (nonexistent) elements in vec
     fill_n(vec.begin(), 10, 0);
3引入 back_inserter
   使用 back_inserter 的程序必须包含 iterator 头文件,back_inserter 是迭代器适配器
    vector<int> vec; // empty vector
    fill_n (back_inserter(vec), 10, 0); // appends 10 elements to vec
    赋值运算将调用 push_back 在容器中添加一个具有指定值的元素
4写入到目标迭代器的算法
copy
 vector<int> ivec; // empty vector
  // copy elements from ilst into ivec
 copy (ilst.begin(), ilst.end(), back_inserter(ivec));
 这个例子的效率比较差：通常  vector<int> ivec(ilst.begin(), ilst.end());
5算法的 _copy 版本
replace 
replace(ilst.begin(), ilst.end(), 0, 42);

vector<int> ivec;
replace_copy (ilst.begin(), ilst.end(),back_inserter(ivec), 0, 42);



11.2.3. Algorithms that Reorder Container Elements

sort   算法带有两个迭代器实参，指出要排序的元素范围。这个算法使用小于（<）操作符比较元素。
unique 算法带有两个指定元素范围的迭代器参数。该算法删除相邻的重复元素，然后重新排列输入范围内的元素，并       且返回一个迭代器，表示无重复的值范围的结束。
     sort(words.begin(), words.end());
     vector<string>::iterator end_unique =unique(words.begin(), words.end());
     words.erase(end_unique, words.end());
*Defining Needed Utility Functions定义需要的实用函数
 &&传递给 count_if 算法的函数只能带有一个实参
// comparison function to be used to sort by word length
     bool isShorter(const string &s1, const string &s2)
     {
         return s1.size() < s2.size();
     }
// determine whether a length of a given word is 6 or more
     bool GT6(const string &s)
     {
          return s.size() >= 6;
     }

*Sorting Algorithms
标准库定义了四种不同的排序算法
1sort 
stable_sort 保留相等元素的原始相对位置
两个都是重载函数，第二个重载版本带有第三个形参：比较元素所使用的谓词函数的名字
*Counting Words of Length Six or More
count_if 算法加上为此函数的版本，返回使谓词函数返回条件成立的元素个数



11.3. Revisiting Iterators
*C++ 语言还提供了另外三种迭代器，都在 iterator 头文件中定义。
插入迭代器：这类迭代器与容器绑定在一起，实现在容器中插入元素的功能。
iostream 迭代器：这类迭代器可与输入或输出流绑定在一起，用于迭代遍历所关联的 IO 流
反向迭代器：这类迭代器实现向后遍历，而不是向前遍历。所有容器类型都定义了自己的 reverse_iterator 类型，由 rbegin 和 rend 成员函数返回

11.3.1. Insert Iterators
插入器是一种迭代器适配器，带有一个容器参数，并生成一个迭代器。
back_inserter， 创建使用 push_back 实现插入的迭代器。

front_inserter，使用 push_front 实现插入。
*front_inserter 需要使用 push_front，只有当容器提供 push_front 操作时，才能使用 front_inserter

inserter，      使用 insert 实现插入操作。除了所关联的容器外，inserter 还带有第二实参：指向插入起始位置的迭代器。
                list<int>::iterator it =find (ilst.begin(), ilst.end(), 42);
                replace_copy (ivec.begin(), ivec.end(),inserter (ilst, it), 100, 0);
11.3.2. iostream Iterators

istream_iterator<T> in(strm);创建从输入流 strm 中读取 T 类型对象的 istream_iterator 对象
istream_iterator<T> in;      istream_iterator 对象的超出末端迭代器
ostream_iterator<T> in(strm);创建将 T 类型的对象写到输出流 strm 的 ostream_iterator 对象
ostream_iterator<T> in(strm, delim);创建将 T 类型的对象写到输出流 strm 的 ostream_iterator 对象，在写入过程中使用 delim 作为元素
 
*istream_iterator Operations
it1 == it2 it1 != it2比较两istream_iterator 对象是否相等（不等）迭代器读取的必须是相同的类型。
                     两个迭代器都是 end 值，则它们相等。
                     两个都不指向流结束位置的迭代器，如果它们使用同一个输入流构造，则它们也相等
*it                  返回从流中读取的值
it->mem              是 (*it).mem 的同诩。返回从流中读取的对象的 mem 成员
++it it++            通过使用元素类型提供的 >> 操作从输入流中读取下一个元素值，使迭代器向前移动。
                    
1*Defining Stream Iterators
流迭代器都是类模板：
任何已定义输入操作符（>> 操作符）的类型都可以定义 istream_iterator。
任何已定义输出操作符（<< 操作符）的类型也可定义 ostream_iterator。
 istream_iterator<int> cin_it(cin);    // reads ints1 from cin
 istream_iterator<int> end_of_stream;  // end iterator value
 ofstream outfile;
 ostream_iterator<Sales_item> output(outfile, " ");

2*Operations on istream_iterators
     istream_iterator<int> in_iter(cin); 
     istream_iterator<int> eof;
     while (in_iter != eof)vec.push_back(*in_iter++);
---rewrite this program as--
     istream_iterator<int> in_iter(cin); // read ints from cin
     istream_iterator<int> eof;      // istream "end" iterator
     vector<int> vec(in_iter, eof);  // construct vec from an iterator range

3*Using ostream_iterators and ostream_iterators
     ostream_iterator<string> out_iter(cout, "\n");
     istream_iterator<string> in_iter(cin), eof;
     while (in_iter != eof)*out_iter++ = *in_iter++;

4*Using istream_iterators with Class Types
5*Limitations on Stream Iterators
   *不可能从 ostream_iterator 对象读入，也不可能写到 istream_iterator 对象中
   *一旦给 ostream_iterator 对象赋了一个值，写入就提交了。赋值后，没有办法再改变这个值。ostream_iterator 对象中每个不同的值都只能正好输出一次
   *ostream_iterator 没有 -> 操作符。

6*Using Stream Iterators with the Algorithms
     istream_iterator<int> cin_it(cin);    // reads ints from cin
     istream_iterator<int> end_of_stream;  // end iterator value
     vector<int> vec(cin_it, end_of_stream);
     sort(vec.begin(), vec.end());
     ostream_iterator<int> output(cout, " ");
     unique_copy(vec.begin(), vec.end(), output);


11.3.3. Reverse Iterators
*Reverse Iterators Require Decrement Operators
   从一个既支持 -- 也支持 ++ 的迭代器就可以定义反向迭代器,流迭代器却不然，由于不能反向遍历流，因此流迭代器不能创建反向迭代器。
*Relationship between Reverse Iterators and Other Iterators
   注意reiter,和reiter.base指的不是相同元素
   使用普通的迭代器对反向迭代器进行初始化或赋值时，所得到的迭代器并不是指向原迭代器所指向的元素。
 

11.3.4. const Iterators
    find_first_of(it, roster1.end(),roster2.begin(), roster2.end())
    如果roster1不是const 那么roster.end也不是const；故it也就不能为const因为要求他们完全一样
11.3.5. The Five Iterator Categories
算法要求的迭代器操作分为五个类别
Input iterator（输入迭代器）读，不能写；只支持自增运算
Output iterator（输出迭代器）写，不能读；只支持自增运算
Forward iterator（前向迭代器）读和写；只支持自增运算
Bidirectional iterator（双向迭代器）读和写；支持自增和自减运算
Random access iterator（随机访问迭代器）读和写；支持完整的迭代器算术运算
1*Input iterator 
==，!=
前后++
*,->
要求在这个层次上提供支持的泛型算法包括 find 和 accumulate。标准库 istream_iterator 类型输入迭代器
2*Output iterator
前后++
*
要求每个迭代器的值必须正好写入一次
输出迭代器一般用作算法的第三个实参,copy ;ostream_iterator 类型输出迭代器
3*Forward iterator
支持输入迭代器和输出迭代器提供的所有操作，
还支持对同一个元素的多次读写。可复制前向迭代器来记录序列中的一个位置，以便将来返回此处。
需要前向迭代器的泛型算法包括 replace，unique(需要读取，还需要写入)。
4*Bidirectional iterator
前向迭代器的全部操作之外，还提供前后--。
需要使用双向迭代器的泛型算法包括 reverse。所有标准库容器提供的迭代器都至少达到双向迭代器的要求。
5*Random access iterator提供在常量时间内访问容器任意位置的功能
支持双向迭代器的所有功能之外
 <、<=、> 和 >=，
n 之间的+、+=、- 和 -=，
两个迭代器之间-
iter[n]，这是 *(iter + n) 的同义词
需要随机访问迭代器的包括 sort 算法。vector、deque 和 string 迭代器是随机访问迭代器，用作访问内置数组元素的指针也是随机访问迭代器。
总结：：map、set 和 list                    是双向迭代器，
        string、vector、deque、内置数组指针 是随机访问迭代器，
       istream_iterator                     是输入迭代器，
       ostream_iterator                     是输出迭代器。

&&&Key Concept: Associative Containers and the Algorithms
尽管 map 和 set 类型提供双向迭代器，在处理算法时，最好将关联容器上的迭代器视为支持自减运算的输入迭代器，而不是完整的双向迭代器。

11.4. Structure of Generic Algorithms
11.4.1. Algorithm Parameter Patterns
大多数算法采用下面四种形式之一：
     alg (beg, end, other parms);
     alg (beg, end, dest, other parms);
     alg (beg, end, beg2, other parms);
     alg (beg, end, beg2, end2, other parms);
1*Algorithms with a Single Destination Iterator
调用这些算法时，必须确保输出容器有足够大的容量存储输出数据，这正是通常要使用插入迭代器或者 ostream_iterator 来调用这些算法的原因。
2*Algorithms with a Second Input Sequence
带有 beg2 而不带 end2 的算法将 beg2 视为第二个输入范围的首元素,这些算法假定以 beg2 开始的范围至少与 beg 和 end 指定的范围一样大。


11.4.2. Algorithm Naming Conventions
1*Distinguishing Versions that Take a Value or a Predicate
带有谓词函数（第 11.2.3 节）形参。带有谓词函数形参的算法，其名字带有后缀 _if,标准库使用额外名字而不是重载，以此消除二义性：
     find(beg, end, val);       // find first instance of val in the input range
     find_if(beg, end, pred);   // find first instance for which pred is true
2*Distinguishing Versions that Copy from Those that Do Not
将元素写到指定的输出目标。此版本的算法在名字中添加了 _copy 后缀：
     reverse(beg, end);
     reverse_copy(beg, end, dest);

11.5. Container-Specific Algorithms
list 容器上的迭代器是双向的，因此，不能使用 sort 等算法。还有一些其他的泛型算法，如 merge、remove、reverse 和 unique，虽然可以用在 list 上，但却付出了性能上     的代价。如果这些算法利用 list 容器实现的特点，则可以更高效地执行。
1*list-Specific Operations
对于 list 对象，应该优先使用 list 容器特有的成员版本，而不是泛型算法

lst.merge(lst2) lst.merge(lst2, comp)   将 lst2 的元素合并到 lst 中。这两个 list 容器对象都必须排序。lst2 中的元素将被删除。合并后，lst2 为空。返回 void 类型
lst.remove(val) lst.remove_if(unaryPred)调用 lst.erase 删除所有等于指定值或使指定的谓词函数返回非零值的元素。返回 void 类型
lst.reverse()                           反向排列 lst 中的元素
lst.sort()                              对 lst 中的元素排序
                                        将 lst2 的元素移到 lst 中迭代器 iter 指向的元素前面。在 lst2 中删除移出的元素
lst.splice(iter, lst2)                  lst2 的所有元素移到 lst 中；合并后，lst2 为空。lst 和 lst2 不能是同一个 list 对象。
lst.splice(iter, lst2, iter2)           只移动 iter2 所指向的元素，这个元素必须是 lst2 中的元素。在这种情况中，lst 和 lst2 可以是同一个 list 对象。
lst.splice(iter, beg, end)              移动迭代器 beg 和 end 标记的范围内的元素。这两个迭代器可标记任意 list 对象内的范围，包括 lst。
                                        当它们指定 lst 的一段范围时，如果 iter 也指向这个范围的一个元素，则该运算未定义。
lst.unique() lst.unique(binaryPred)     调用 erase 删除同一个值的相邻（相邻！！！）副本。使用 == 或谓词函数实现判断
eg::
     l.remove(val);     // removes all instances of val from 1
     l.remove_if(pred); // removes all instances for which pred is true from 1
     l.reverse();       // reverses the order of elements in 1
     l.sort();          // use element type < operator to compare elements
     l.sort(comp);      // use comp to compare elements
     l.unique();        // uses element == to remove adjacent duplicates
     l.unique(comp);    // uses comp to remove duplicate adjacent copies
                                    
2*list 差别。
其中一个差别是 remove 和 unique 的 list 版本修改了其关联的基础容器
另一个差别是 list 容器提供的 merge 和 splice 运算会破坏它们的实参




















